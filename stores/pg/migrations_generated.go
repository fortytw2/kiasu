// Code generated by go-bindata.
// sources:
// schema/1_init.sql
// schema/2_auto_update_column.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\xcd\x6e\xe2\x30\x10\xbe\xe7\x29\xe6\x16\xaa\xe5\xd0\xdb\x1e\x56\x7b\x48\xa9\xd1\x46\x85\xa4\x1b\x1c\x89\xf6\x62\x59\xf1\x40\xad\x0d\x76\xd6\x76\x68\xfb\xf6\xab\x84\x42\x03\x49\xd9\x80\x8a\xd4\x6b\x3c\x63\xcf\xf7\x93\x6f\x46\x09\x09\x28\x01\x32\xa7\x24\x9a\x85\x71\x04\xe1\x18\xa2\x98\x02\x99\x87\x33\x3a\x83\x62\x99\x99\xd7\xc2\xe9\x1f\x9e\xf7\x56\x49\x83\x9b\x09\x81\x05\xa2\xb0\x30\xf0\x00\xa4\x80\x34\x0d\x6f\xe1\x3e\x09\xa7\x41\xf2\x00\x77\xe4\x01\x6e\xc9\x38\x48\x27\x14\x96\xa8\x98\xe1\x4a\xe8\x15\x2b\x4b\x29\x06\x57\x43\xcf\x03\x28\xf2\x72\x29\x15\x50\x32\xa7\xf5\x53\x51\x3a\x99\x0c\xab\x9b\x94\x74\x92\xe7\xac\x34\xf9\xe1\xa1\x07\x90\x19\xe4\x0e\x05\xe3\x0e\x68\x38\x25\x33\x1a\x4c\xef\xe9\xe3\xae\x66\xf7\xa6\xd2\xcf\xd5\x3b\x00\x65\x21\x4e\x6b\x30\xb8\x30\x68\x9f\x5a\x2d\xd5\x99\xe2\x2b\xdc\x1f\x0a\xd2\x28\xfc\x9d\x92\xea\x50\xa0\xcd\x8c\x2c\x9c\xd4\x2d\x54\x1e\xc0\x13\xbe\xb0\x4c\xe7\xda\x74\x20\xce\xb4\xfa\x00\xee\xe8\x17\x19\xdd\x0d\xc8\x9c\x26\xc1\x88\x0e\xaa\x69\x1e\xe3\x88\xc0\x38\x89\xa7\x0d\x2a\xae\xe0\x27\xf8\xd7\x7e\x3d\xfe\xb1\x8e\x77\x2e\xfa\x76\x34\xc9\xd8\xf6\x78\x57\x87\x36\x28\xb4\x75\x67\xd9\x00\x6a\x07\xb1\x6d\x57\x42\xc6\x24\x21\xd1\x88\xcc\xde\x9c\xf5\x85\xa4\xaf\x30\x76\x1c\x78\x00\x4e\xba\x1c\xdb\xaa\xb6\x04\x6d\x58\x25\xd3\xca\xa1\x72\x5f\x50\xf0\x1d\xcc\xcf\x75\x48\x69\xd1\x9c\x1b\x14\x97\xd6\xdd\x03\xc0\x15\x97\x1f\xab\x85\xaa\x4e\x3f\x14\xac\xe0\xd6\x3e\x6b\x23\xda\x6a\x2f\xb8\xcc\x51\xb0\x5c\x2f\xa5\x62\x99\x2e\x95\x83\x30\x3a\xd0\x96\x67\x4e\xae\x11\x6e\xe2\x78\x42\x82\xa8\x3d\x8f\xbf\xe0\xb9\x45\xff\xcd\x20\x0b\x69\x56\x28\x4e\xa9\xe6\x55\xf4\x30\xa7\xff\x60\x47\xac\xd6\x9f\xd9\x89\x5c\xfe\x47\xfb\xc3\x3b\xfb\x7a\xe6\x33\x8c\xdc\xed\x31\x76\xf6\x46\xea\x1f\x45\xb0\x79\xa9\xa3\x72\xe3\xf2\x3d\xcd\x0b\x23\xb5\x91\xee\x75\xcf\x0d\xbb\x39\xae\x9b\x28\x36\x86\x83\x30\xba\x25\xf3\x77\x30\xac\x54\xf2\x6f\x89\x4c\x8a\x17\x88\xa3\x06\xc8\xc1\xf6\xea\xe1\x76\xf2\xe1\x76\xb0\x16\x35\x06\xb9\x60\xd6\x71\x57\x5a\x3c\x93\x9d\xbe\x98\x37\x49\x59\x55\xb6\x4a\x37\x6b\x62\x8f\x9e\x7a\xb0\xde\x3f\xb6\xc0\xb5\xcc\x2a\x2a\xda\xf6\xce\x75\xc6\x3f\xd8\xbc\xc7\xd3\x8b\x1f\x37\x95\x45\x6b\xa5\x56\x17\x26\xed\x9c\x94\x93\x6a\xcd\x73\xd9\x95\x74\x75\x66\xbd\x14\xd2\xa0\xed\x77\x1d\x7c\x03\xa9\x1c\x9a\x35\xcf\xc1\xff\x0e\x82\xbf\x5a\x7f\x97\x19\x17\x5f\x52\xfb\x40\x9a\x52\xfc\x0b\x00\x00\xff\xff\xe8\x43\xfe\x39\x96\x0a\x00\x00")

func schema1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema1_initSql,
		"schema/1_init.sql",
	)
}

func schema1_initSql() (*asset, error) {
	bytes, err := schema1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1_init.sql", size: 2710, mode: os.FileMode(420), modTime: time.Unix(1484165248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema2_auto_update_columnSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\xcf\xc1\x6a\x83\x40\x10\xc6\xf1\xfb\x3e\xc5\x77\x10\x92\x5c\xfa\x02\xd2\x83\x59\x47\x2b\x94\x5d\x99\x28\xe9\x4d\x16\xdc\x4a\x41\xd4\x66\x56\xfa\xfa\xa5\xa6\xa1\x2d\xa5\x42\xc1\xb3\xff\xf1\xf7\xad\x66\x4a\x2a\x82\x65\x30\x95\x8f\x89\x26\x64\xb5\xd1\x55\x61\x0d\xc4\x87\x66\x9e\x5a\x17\x7c\xdb\xb8\xb0\x3f\x28\xa6\xaa\x66\x73\x42\xc5\x45\x9e\x13\x23\x39\x21\x8a\xd4\x91\xf2\xc2\x28\x00\x30\x74\xbe\xfb\x3a\xc0\x3d\x86\xf1\x6d\x7f\x88\x97\x6f\xd7\xdb\x8f\x24\x56\x64\xd2\x58\x45\x11\x7a\x37\x74\xb3\xeb\x3c\x76\x53\x3f\x75\xf2\xda\xef\x62\xa5\x3e\x07\xdd\x8c\xeb\xff\x9a\x59\xfc\x45\xbe\xad\xc1\x91\x32\xcb\x84\xba\x4c\x97\xf9\x06\x4b\x81\xcc\x32\x28\xd1\x0f\x60\x7b\x06\x3d\x91\xae\x2b\x42\xc9\x56\x53\x5a\x33\xfd\x7a\xd2\x9f\xde\xb3\xf7\xed\xba\xb7\x14\x9b\x79\x17\xef\xda\x46\x82\x0b\xb3\xf8\x75\xf7\x47\xb9\x99\x3f\x8d\x12\xd6\xdd\xa5\xd8\xcc\x13\x2f\xf2\x32\x0e\xeb\xe4\x2d\xfa\xbf\xfa\x1e\x00\x00\xff\xff\x0f\xb6\x02\xfa\xd6\x02\x00\x00")

func schema2_auto_update_columnSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema2_auto_update_columnSql,
		"schema/2_auto_update_column.sql",
	)
}

func schema2_auto_update_columnSql() (*asset, error) {
	bytes, err := schema2_auto_update_columnSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/2_auto_update_column.sql", size: 726, mode: os.FileMode(420), modTime: time.Unix(1484165419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/1_init.sql": schema1_initSql,
	"schema/2_auto_update_column.sql": schema2_auto_update_columnSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{schema1_initSql, map[string]*bintree{}},
		"2_auto_update_column.sql": &bintree{schema2_auto_update_columnSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

