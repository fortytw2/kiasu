// Code generated by go-bindata.
// sources:
// schema/1_init.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4f\x6f\x9b\x30\x14\xbf\xf3\x29\xde\x8d\x54\xcb\x61\xb7\x1d\xa6\x1d\x68\xea\x68\xa8\x09\x74\xc4\x48\xe9\x2e\x96\x85\x5f\x52\x6b\xc4\x66\xb6\x49\xdb\x6f\x3f\x41\xfe\x34\x01\x9a\x91\xa8\x91\x7a\xc5\xef\xd9\xef\xf7\xc7\x3f\x33\x4a\x48\x40\x09\x90\x39\x25\xd1\x2c\x8c\x23\x08\xc7\x10\xc5\x14\xc8\x3c\x9c\xd1\x19\x14\xcb\xcc\xbc\x16\x4e\x7f\xf7\xbc\x6d\x25\x0d\x6e\x27\x04\x16\x88\xc2\xc2\xc0\x03\x90\x02\xd2\x34\xbc\x83\x87\x24\x9c\x06\xc9\x23\xdc\x93\x47\xb8\x23\xe3\x20\x9d\x50\x58\xa2\x62\x86\x2b\xa1\x57\xac\x2c\xa5\x18\xdc\x0c\x3d\x0f\xa0\xc8\xcb\xa5\x54\x40\xc9\x9c\xd6\x47\x45\xe9\x64\x32\xac\x76\x52\xd2\x49\x9e\xb3\xd2\xe4\xcd\x45\x0f\x20\x33\xc8\x1d\x0a\xc6\x1d\xd0\x70\x4a\x66\x34\x98\x3e\xec\x2b\xf6\x27\x2a\xfd\x5c\x9d\x02\x50\x16\xe2\x9c\x72\x83\x0b\x83\xf6\xa9\xd1\x50\xad\x28\xbe\xc2\xe3\x71\x20\x8d\xc2\x5f\x29\xa9\x16\x05\xda\xcc\xc8\xc2\x49\xdd\xc2\xe3\x01\x3c\xe1\x0b\xcb\x74\xae\x4d\x07\xd6\x4c\xab\x77\x80\x8e\x7e\x92\xd1\xfd\x80\xcc\x69\x12\x8c\xe8\xa0\x9a\xe5\x77\x1c\x11\x18\x27\xf1\xf4\x80\x84\x1b\xf8\x01\xfe\x57\xbf\x1e\xfe\x54\xc7\x1b\x0f\x7d\x3b\x0e\xa9\xd8\xf5\x78\x37\x4d\x03\x14\xda\xba\x8b\x0c\x00\xb5\x77\xd8\xae\x2b\x21\x63\x92\x90\x68\x44\x66\x5b\x4f\x7d\x0a\xd1\x2b\x74\xad\xcf\x1e\x80\x93\x2e\xc7\xb6\x9a\x1d\x42\x02\x64\x5a\x39\x54\xae\xa5\xf0\x27\x90\x78\x0f\xef\x63\x3d\x51\x5a\x34\x97\x86\xc2\x35\x95\xf6\x00\x70\xc5\x65\x87\x46\xa8\xea\x78\x43\xc1\x0a\x6e\xed\xb3\x36\xa2\x5d\xb3\xe0\x32\x47\xc1\x72\xbd\x94\x8a\x65\xba\x54\x0e\xc2\xa8\x71\x67\x79\xe6\xe4\x1a\xe1\x36\x8e\x27\x24\x88\xda\x83\xf8\x0b\x9e\x5b\xf4\xb7\xb6\x58\x48\xb3\x42\x71\x4e\x35\xaf\x12\x86\x39\xfd\x07\x3b\x72\xb3\xfe\xcc\xce\x22\xf0\x3f\x72\x37\x77\xec\x6b\x93\x8f\xf0\x6e\xb7\xad\xd8\xc5\x0f\x4e\xff\xbc\x81\xcd\x49\x1d\x95\x1b\x63\x1f\x29\x5e\x18\xa9\x8d\x74\xaf\x47\x5e\x38\x9c\x7d\xf3\x48\x40\x18\xdd\x91\xf9\x1b\x04\x56\x2a\xf9\xb7\x44\x26\xc5\x0b\xc4\xd1\x01\xb4\xc1\x6e\xc3\xe1\x6e\xde\xe1\x6e\x9c\x06\x1d\x06\xb9\x60\xd6\x71\x57\x5a\xbc\x90\x91\xbe\x38\x37\x41\x58\x55\xb6\x4a\x37\xf9\x7f\x44\x49\x3d\x58\xcf\xfb\x2b\x70\x2d\xb3\x8a\x86\xb6\x9d\x73\x9d\xf1\x77\x1e\xd4\xd3\x11\xc5\x4f\xdb\xc8\xa2\xb5\x52\xab\x2b\x53\x76\x7e\x94\x49\xb5\xe6\xb9\x6c\xc7\x59\x9d\x4f\x2f\x85\x34\x68\xfb\x6c\x05\x5f\x40\x2a\x87\x66\xcd\x73\xf0\xbf\x81\xe0\xaf\xd6\xdf\xa7\xc3\xd5\x7f\x33\x8e\x41\x1c\x8a\xf0\x2f\x00\x00\xff\xff\x79\x96\x4d\x55\x61\x0a\x00\x00")

func schema1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema1_initSql,
		"schema/1_init.sql",
	)
}

func schema1_initSql() (*asset, error) {
	bytes, err := schema1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1_init.sql", size: 2657, mode: os.FileMode(420), modTime: time.Unix(1483885344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/1_init.sql": schema1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{schema1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

