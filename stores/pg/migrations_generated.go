// Code generated by go-bindata.
// sources:
// schema/1_init.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\xcd\x6e\xe2\x30\x10\xbe\xe7\x29\xe6\x16\xaa\xe5\xd0\xdb\x1e\x56\x7b\x48\xa9\xd1\x46\x85\xa4\x1b\x1c\x89\xf6\x62\x59\xf1\x40\xad\x35\x76\xd6\x76\x68\xfb\xf6\xab\x84\x42\x81\xa4\xdd\x80\x5a\xa9\xd7\x78\xc6\x9e\xef\x67\xbe\x8c\x32\x12\x51\x02\x64\x4e\x49\x32\x8b\xd3\x04\xe2\x31\x24\x29\x05\x32\x8f\x67\x74\x06\xe5\xb2\xb0\xcf\xa5\x37\x3f\x82\xe0\xa5\x92\x46\x57\x13\x02\x0b\x44\xe1\x60\x10\x00\x48\x01\x79\x1e\x5f\xc3\x6d\x16\x4f\xa3\xec\x0e\x6e\xc8\x1d\x5c\x93\x71\x94\x4f\x28\x2c\x51\x33\xcb\xb5\x30\x2b\x56\x55\x52\x0c\x2e\x86\x41\x00\x50\xaa\x6a\x29\x35\x50\x32\xa7\xcd\x53\x49\x3e\x99\x0c\xeb\x9b\xb4\xf4\x92\x2b\x56\x59\x75\x7c\x18\x00\x14\x16\xb9\x47\xc1\xb8\x07\x1a\x4f\xc9\x8c\x46\xd3\x5b\x7a\xbf\xab\xd9\xbd\xa9\xcd\x63\xfd\x0e\x40\x55\x8a\xd3\x1a\x2c\x2e\x2c\xba\x87\x56\x4b\x7d\xa6\xf9\x0a\x0f\x87\x82\x3c\x89\x7f\xe7\xa4\x3e\x14\xe8\x0a\x2b\x4b\x2f\x4d\x0b\x55\x00\xf0\x80\x4f\xac\x30\xca\xd8\x0e\xc4\x85\xd1\x9d\x70\x03\x80\xd1\x2f\x32\xba\x19\x90\x39\xcd\xa2\x11\x1d\xd4\xe3\xdc\xa7\x09\x81\x71\x96\x4e\xf7\xb8\xb8\x80\x9f\x10\x5e\x86\xcd\xfc\xef\x75\xbc\x92\xd1\xb7\x63\x9f\x8d\x6d\x4f\x70\x71\xec\x83\xd2\x38\x7f\x96\x0f\xa0\xb1\x10\xdb\x76\x65\x64\x4c\x32\x92\x8c\xc8\xec\xc5\x5a\x5f\x48\xfb\x1a\x63\xc7\x41\x00\xe0\xa5\x57\xd8\x96\xb5\x43\x51\x80\xc2\x68\x8f\xda\x7f\x45\xa9\x77\x00\x3f\xd6\x1b\x95\x43\x7b\x6e\x46\x7c\xb6\xe2\x01\x00\xae\xb8\x54\x6f\xee\x34\xea\x26\xf8\x50\xb0\x92\x3b\xf7\x68\xac\x68\x4b\xba\xe0\x52\xa1\x60\xca\x2c\xa5\x66\x85\xa9\xb4\x87\x38\x39\xda\x7e\x5e\x78\xb9\x46\xb8\x4a\xd3\x09\x89\x92\xf6\x3c\xe1\x82\x2b\x87\xe1\x8b\x43\x16\xd2\xae\x50\x9c\x52\xcd\xeb\xd4\x61\xde\xfc\xc1\x8e\x44\x6d\x3e\xb3\x13\xb9\xfc\x8f\xf6\xc7\x77\xf6\xf5\xcc\x47\x18\xb9\xdb\x63\xec\xec\x9f\x51\xff\x10\x82\xcd\x4b\x1d\x95\x1b\x97\x1f\x68\x5e\x5a\x69\xac\xf4\xcf\x07\x6e\xd8\xcd\x71\xb9\x8f\x62\x63\x38\x88\x93\x6b\x32\x7f\x05\xc3\x2a\x2d\xff\x56\xc8\xa4\x78\x82\x34\xd9\x03\x39\xd8\x5e\x3d\xdc\x4e\x3e\xdc\x0e\xd6\xa2\xc6\x22\x17\xcc\x79\xee\x2b\x87\x67\xb2\xd3\x17\xf3\x26\x23\xeb\xca\x56\xe9\xe6\x07\x71\x40\x4f\x33\x58\xef\xc5\x16\xb8\x96\x45\x4d\x45\xdb\xde\xca\x14\xfc\x8d\x9f\xee\xfb\xe9\xc5\xdf\x37\x95\x43\xe7\xa4\xd1\x9f\x4c\xda\x39\x29\x27\xf5\x9a\x2b\xd9\x95\x74\x4d\x66\x3d\x95\xd2\xa2\xeb\x77\x1d\x7c\x03\xa9\x3d\xda\x35\x57\x10\x7e\x07\xc1\x9f\x5d\xb8\xcb\x8c\x13\x19\x3d\x7d\xb7\x0f\x81\xec\x4b\xf1\x2f\x00\x00\xff\xff\x71\xfc\x37\x18\x91\x0a\x00\x00")

func schema1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema1_initSql,
		"schema/1_init.sql",
	)
}

func schema1_initSql() (*asset, error) {
	bytes, err := schema1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1_init.sql", size: 2705, mode: os.FileMode(420), modTime: time.Unix(1483890448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/1_init.sql": schema1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{schema1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

