// Code generated by go-bindata.
// sources:
// schema/1_init.sql
// schema/2_auto_update_column.sql
// schema/3_favorites.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x6f\xe2\x3c\x10\xbe\xe7\x57\xcc\x2d\x54\x6f\x0f\xef\x6d\x0f\xab\x3d\xa4\xd4\x68\xa3\x42\xd2\x0d\x8e\x44\xbb\x5a\x59\x56\x3c\x50\x6b\x8d\x1d\xd9\x0e\x6d\xff\xfd\xca\xa1\x65\x81\x00\x02\x54\x56\xbd\xc6\x33\xf6\x3c\x1f\x79\xa6\x5f\x90\x84\x12\x20\x13\x4a\xb2\x71\x9a\x67\x90\x0e\x20\xcb\x29\x90\x49\x3a\xa6\x63\xa8\x67\x95\x7d\xad\xbd\xf9\x1a\x45\x6f\x95\x34\xb9\x19\x12\x98\x22\x0a\x07\xbd\x08\x40\x0a\x28\xcb\xf4\x16\xee\x8b\x74\x94\x14\x0f\x70\x47\x1e\xe0\x96\x0c\x92\x72\x48\x61\x86\x9a\x59\xae\x85\x99\xb3\xa6\x91\xa2\x77\x75\x1d\x45\x00\xb5\x6a\x66\x52\x03\x25\x13\xda\x3e\x95\x95\xc3\xe1\x75\xb8\x49\x4b\x2f\xb9\x62\x8d\x55\xdb\x87\x11\x40\x65\x91\x7b\x14\x8c\x7b\xa0\xe9\x88\x8c\x69\x32\xba\xa7\x8f\xab\x9a\xd5\x9b\xda\x3c\x87\x77\x00\x9a\x5a\x9c\xd6\x60\x71\x6a\xd1\x3d\x75\x5a\xc2\x99\xe6\x73\xdc\x1c\x0a\xca\x2c\xfd\x51\x92\x70\x28\xd0\x55\x56\xd6\x5e\x9a\x0e\xaa\x08\xe0\x09\x5f\x58\x65\x94\xb1\x3b\x10\x57\x46\xef\x81\xdb\xff\x4e\xfa\x77\x3d\x32\xa1\x45\xd2\xa7\xbd\x30\xcd\x63\x9e\x11\x18\x14\xf9\x68\x8d\x8a\x2b\xf8\x06\xf1\xff\x71\x3b\xfe\xa1\x8e\xbf\x5c\x1c\xdb\xb1\x4e\xc6\x7b\x4f\x74\xb5\x6d\x83\xda\x38\x7f\x96\x0d\xa0\x75\x10\x7b\xef\x2a\xc8\x80\x14\x24\xeb\x93\xf1\x9b\xb3\x3e\x91\xf4\x01\xe3\x8e\x83\x08\xc0\x4b\xaf\xb0\xab\x6a\x47\xd0\x35\xab\x54\x46\x7b\xd4\xfe\x13\x0a\xbe\x82\xf9\xb1\x0e\x69\x1c\xda\x73\x83\xe2\xd2\xba\x47\x00\x38\xe7\x72\xbf\x5a\xa8\xdb\xf4\x43\xc1\x6a\xee\xdc\xb3\xb1\xa2\xab\xf6\x94\x4b\x85\x82\x29\x33\x93\x9a\x55\xa6\xd1\x1e\xd2\x6c\x4b\x5b\x5e\x79\xb9\x40\xb8\xc9\xf3\x21\x49\xb2\xee\x3c\xf1\x94\x2b\x87\xf1\x9b\x41\xa6\xd2\xce\x51\x9c\x52\xcd\x43\xf4\x30\x6f\x7e\xe3\x8e\x58\x6d\x3f\xb3\x13\xb9\x0c\xc0\x8c\x12\x68\x99\x14\x0e\x3c\xbe\xf8\x9f\xbf\x8e\xf7\xeb\xf6\x93\xc7\x5a\xea\x23\x7c\xde\xb5\xe0\x12\xc8\x99\x31\xf5\x0f\x3c\xd8\xee\x96\x40\xf1\xa6\xaf\x96\xf9\x78\x3a\xf9\x97\x21\xd1\x22\x17\xcc\x79\xee\x1b\x87\x67\x52\x19\xa2\x60\x57\xe2\x2f\x23\x62\x1d\x7b\xc8\xa2\x50\xd9\x29\x5d\xee\x9b\x0d\x2a\xda\xc1\x8e\x56\x47\xe0\x42\x56\x18\xee\xee\xfc\x27\xca\x54\x7c\xcf\x0a\x3f\x1c\x83\xfc\x30\x73\x0e\x9d\x93\x46\x5f\x98\xb4\x73\xac\x2a\xf5\x82\x2b\xb9\xcb\xae\x6d\xf8\xbd\xd4\xd2\xa2\x3b\xee\x3a\xf8\x0f\xa4\xf6\x68\x17\x5c\x41\xfc\x05\x04\x7f\x75\xf1\x2a\x7c\x2e\xbe\xed\x36\x81\xac\x4b\xf1\x27\x00\x00\xff\xff\x59\x8f\x80\xd2\xdf\x0a\x00\x00")

func schema1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema1_initSql,
		"schema/1_init.sql",
	)
}

func schema1_initSql() (*asset, error) {
	bytes, err := schema1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1_init.sql", size: 2783, mode: os.FileMode(420), modTime: time.Unix(1484483316, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema2_auto_update_columnSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\xcf\xc1\x6a\x83\x40\x10\xc6\xf1\xfb\x3e\xc5\x77\x10\x92\x5c\xfa\x02\xd2\x83\x59\x47\x2b\x94\x5d\x99\x28\xe9\x4d\x16\xdc\x4a\x41\xd4\x66\x56\xfa\xfa\xa5\xa6\xa1\x2d\xa5\x42\xc1\xb3\xff\xf1\xf7\xad\x66\x4a\x2a\x82\x65\x30\x95\x8f\x89\x26\x64\xb5\xd1\x55\x61\x0d\xc4\x87\x66\x9e\x5a\x17\x7c\xdb\xb8\xb0\x3f\x28\xa6\xaa\x66\x73\x42\xc5\x45\x9e\x13\x23\x39\x21\x8a\xd4\x91\xf2\xc2\x28\x00\x30\x74\xbe\xfb\x3a\xc0\x3d\x86\xf1\x6d\x7f\x88\x97\x6f\xd7\xdb\x8f\x24\x56\x64\xd2\x58\x45\x11\x7a\x37\x74\xb3\xeb\x3c\x76\x53\x3f\x75\xf2\xda\xef\x62\xa5\x3e\x07\xdd\x8c\xeb\xff\x9a\x59\xfc\x45\xbe\xad\xc1\x91\x32\xcb\x84\xba\x4c\x97\xf9\x06\x4b\x81\xcc\x32\x28\xd1\x0f\x60\x7b\x06\x3d\x91\xae\x2b\x42\xc9\x56\x53\x5a\x33\xfd\x7a\xd2\x9f\xde\xb3\xf7\xed\xba\xb7\x14\x9b\x79\x17\xef\xda\x46\x82\x0b\xb3\xf8\x75\xf7\x47\xb9\x99\x3f\x8d\x12\xd6\xdd\xa5\xd8\xcc\x13\x2f\xf2\x32\x0e\xeb\xe4\x2d\xfa\xbf\xfa\x1e\x00\x00\xff\xff\x0f\xb6\x02\xfa\xd6\x02\x00\x00")

func schema2_auto_update_columnSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema2_auto_update_columnSql,
		"schema/2_auto_update_column.sql",
	)
}

func schema2_auto_update_columnSql() (*asset, error) {
	bytes, err := schema2_auto_update_columnSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/2_auto_update_column.sql", size: 726, mode: os.FileMode(420), modTime: time.Unix(1484165419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema3_favoritesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\x4f\x4f\x83\x40\x14\xc4\xef\xfb\x29\xe6\x56\x48\x3c\x78\x6f\x3c\x6c\x97\x47\x4b\x0a\x2c\x79\xdd\x8d\x6d\x2f\x1b\x22\xab\xe9\x41\x68\xf8\xa3\x5f\xdf\x40\xa4\xa2\x31\x26\x5e\x5f\xe6\x37\x99\x99\xa7\x98\xa4\x21\x18\xb9\x49\x09\x43\xe7\x5b\xf7\x5c\xbe\x35\xed\xa5\xf7\x1d\x02\x01\x5c\x2a\x58\x9b\x44\x28\x38\xc9\x24\x9f\xb0\xa7\x13\x22\x8a\xa5\x4d\x0d\x5e\x7c\xed\xda\xb2\xae\x9a\x57\x37\x0c\x97\x2a\x08\xef\x84\x00\x9e\x5a\x5f\xf6\xbe\x72\x65\x0f\x93\x64\x74\x30\x32\x2b\xcc\x19\xb9\x36\xc8\x6d\x9a\xde\xe8\xba\x79\x1f\x09\x60\xb8\x56\xff\x01\x04\x70\x6d\xba\xde\xcd\xc9\x98\x62\x62\xca\x15\x1d\xa6\x7b\x77\x03\x27\xef\xb1\xd1\x2f\xca\xf1\xbe\x54\x0a\x40\xed\x48\xed\x03\x3a\x1a\x96\xca\x04\x63\x92\xb3\xce\x09\x31\xeb\x6c\xd1\x29\xc4\x03\x56\xf7\xab\x29\xf8\x5f\xc4\x57\xa9\x99\x10\xe1\x5a\x88\x79\x6e\x4e\xb6\x5b\xe2\x4f\x95\xfb\xbe\xbb\x5b\x0c\xb2\xa1\x58\x33\xc1\x16\xd1\x88\xe9\xfc\xe7\x8b\x62\xcd\x20\xa9\x76\x60\xfd\x08\x3a\x92\xb2\x86\x50\xb0\x56\x14\x59\x26\x74\xbe\x5f\xb8\x05\xe1\x5a\x7c\x04\x00\x00\xff\xff\xdf\x15\xbe\xe2\xf0\x01\x00\x00")

func schema3_favoritesSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema3_favoritesSql,
		"schema/3_favorites.sql",
	)
}

func schema3_favoritesSql() (*asset, error) {
	bytes, err := schema3_favoritesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/3_favorites.sql", size: 496, mode: os.FileMode(420), modTime: time.Unix(1484482323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/1_init.sql": schema1_initSql,
	"schema/2_auto_update_column.sql": schema2_auto_update_columnSql,
	"schema/3_favorites.sql": schema3_favoritesSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{schema1_initSql, map[string]*bintree{}},
		"2_auto_update_column.sql": &bintree{schema2_auto_update_columnSql, map[string]*bintree{}},
		"3_favorites.sql": &bintree{schema3_favoritesSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

