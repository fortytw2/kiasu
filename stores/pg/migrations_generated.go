// Code generated by go-bindata.
// sources:
// schema/1_init.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x6f\xe2\x3c\x10\xbe\xe7\x57\xcc\x2d\x54\x2f\x87\xde\xde\xc3\x6a\x0f\x29\x18\x6d\x54\x48\xba\xc1\x91\x68\x2f\x96\x15\x0f\xd4\xda\x60\x67\x6d\x87\xc2\xbf\x5f\x25\x7c\x14\x48\x96\x0d\xa8\x95\x7a\x8d\x67\xec\x79\x3e\xf2\xcc\x20\x21\x01\x25\x40\x66\x94\x44\xd3\x30\x8e\x20\x1c\x41\x14\x53\x20\xb3\x70\x4a\xa7\x50\x2c\x32\xb3\x29\x9c\xfe\xe6\x79\xbb\x4a\x1a\x3c\x8c\x09\xcc\x11\x85\x85\x9e\x07\x20\x05\xa4\x69\x38\x84\xa7\x24\x9c\x04\xc9\x33\x3c\x92\x67\x18\x92\x51\x90\x8e\x29\x2c\x50\x31\xc3\x95\xd0\x4b\x56\x96\x52\xf4\xee\xfa\x9e\x07\x50\xe4\xe5\x42\x2a\xa0\x64\x46\xeb\xa7\xa2\x74\x3c\xee\x57\x37\x29\xe9\x24\xcf\x59\x69\xf2\xf3\x43\x0f\x20\x33\xc8\x1d\x0a\xc6\x1d\xd0\x70\x42\xa6\x34\x98\x3c\xd1\x97\x43\xcd\xe1\x4d\xa5\xdf\xaa\x77\x00\xca\x42\x5c\xd7\x60\x70\x6e\xd0\xbe\x36\x5a\xaa\x33\xc5\x97\x78\x3a\x14\xa4\x51\xf8\x33\x25\xd5\xa1\x40\x9b\x19\x59\x38\xa9\x1b\xa8\x3c\x80\x57\x5c\xb3\x4c\xe7\xda\xb4\x20\xce\xb4\x6a\x85\xeb\x01\x0c\x7e\x90\xc1\x63\x8f\xcc\x68\x12\x0c\x68\xaf\x1a\xe7\x25\x8e\x08\x8c\x92\x78\x72\xc4\xc5\x1d\x7c\x07\xff\xde\xaf\xe7\xbf\xd4\xf1\x4e\x46\xd7\x8e\x63\x36\xf6\x3d\xde\xdd\xb9\x0f\x0a\x6d\xdd\x4d\x3e\x80\xda\x42\x6c\xdf\x95\x90\x11\x49\x48\x34\x20\xd3\x9d\xb5\xbe\x90\xf6\x15\xc6\x96\x03\x0f\xc0\x49\x97\x63\x53\xd6\x16\x45\x01\x32\xad\x1c\x2a\xf7\x15\xa5\x3e\x00\xfc\x58\x6f\x94\x16\xcd\xad\x19\xf1\xd9\x8a\x7b\x00\xb8\xe4\xb2\x45\x27\x54\x75\xe2\xa1\x60\x05\xb7\xf6\x4d\x1b\xd1\xac\x99\x73\x99\xa3\x60\xb9\x5e\x48\xc5\x32\x5d\x2a\x07\x61\x74\xf6\xdb\xf3\xcc\xc9\x15\xc2\x43\x1c\x8f\x49\x10\x35\x07\xf1\xe7\x3c\xb7\xe8\xef\xac\x31\x97\x66\x89\xe2\x9a\x6a\x5e\xc5\x0d\x73\xfa\x17\xb6\x44\x69\xfd\x99\x5d\x49\xe2\x3f\x44\x3f\xbf\xb3\xab\x59\x3e\xc2\xc1\xed\xe6\x62\x37\x6f\xa1\xee\xe9\x03\xdb\x97\x5a\x2a\xb7\xf6\x3e\xd1\xbc\x30\x52\x1b\xe9\x36\x27\x6e\x38\xcc\x71\x7f\x8c\x62\xbb\x3d\x20\x8c\x86\x64\xf6\x0e\x86\x95\x4a\xfe\x2e\x91\x49\xb1\x86\x38\x3a\x02\xd9\xdb\x5f\xdd\xdf\x4f\xde\xdf\x0f\xd6\xa0\xc6\x20\x17\xcc\x3a\xee\x4a\x8b\x37\xb2\xd3\x15\xf3\x36\x1c\xab\xca\x46\xe9\x76\x33\x9c\xd0\x53\x0f\xd6\xf9\x8f\x16\xb8\x92\x59\x45\x45\xd3\xde\xb9\xce\xf8\x5f\xb6\xed\xe5\xd8\xe2\x97\x4d\x65\xd1\x5a\xa9\xd5\x27\x93\x76\x4b\xbc\x49\xb5\xe2\xb9\x6c\x8b\xb8\x3a\xb3\xd6\x85\x34\x68\xbb\x5d\x07\xff\x81\x54\x0e\xcd\x8a\xe7\xe0\xff\x0f\x82\x6f\xac\x7f\xc8\x8c\x2b\x19\xbd\xfe\xdf\x3e\x05\x72\x2c\xc5\x9f\x00\x00\x00\xff\xff\xaf\x64\x1d\x4a\x8a\x0a\x00\x00")

func schema1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema1_initSql,
		"schema/1_init.sql",
	)
}

func schema1_initSql() (*asset, error) {
	bytes, err := schema1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1_init.sql", size: 2698, mode: os.FileMode(420), modTime: time.Unix(1483887980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/1_init.sql": schema1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{schema1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

