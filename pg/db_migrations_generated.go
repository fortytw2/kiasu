// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\xdf\x6f\xdb\x36\x10\xc7\x9f\xa5\xbf\xe2\xd0\x17\xdb\x98\x3d\xb4\xc5\xb0\x97\x3c\x39\x09\x83\x6a\x73\xe4\xce\x96\xb7\x74\xc3\x40\xd0\xe2\xd9\xe1\x2c\x91\x1a\x49\xa5\x31\x8a\xfe\xef\x03\x29\xc9\x91\x6c\x67\xf9\x81\x2c\x58\x9f\x0c\x53\x5f\xf2\x4e\xf7\xf9\xde\x51\x67\x33\x32\x4e\x08\x90\xab\x84\xc4\xf3\x68\x1a\x43\x74\x01\xf1\x34\x01\x72\x15\xcd\x93\x39\x14\xeb\x54\x6f\x0b\xab\x4e\xc2\x07\x84\x6f\xca\x52\xf0\x91\x32\xa6\x78\xf3\xa0\x36\x15\x16\x6f\xed\x49\xd8\xe8\x92\xf1\xe9\x84\x40\x69\x50\x1b\xe8\x87\x81\xe0\xb0\x58\x44\xe7\xf0\x71\x16\x5d\x8e\x67\x9f\xe0\x67\xf2\x09\xce\xc9\xc5\x78\x31\x49\xc0\x45\xa1\x6b\x94\xa8\x99\x45\x7a\xf3\x2e\x4f\xfb\x83\x61\x18\x06\xa9\x46\x66\x91\x53\x66\x21\x89\x2e\xc9\x3c\x19\x5f\x7e\x4c\x7e\xf7\x41\xe3\xc5\x64\xb2\xdb\x2f\xd5\x67\xb7\x21\x28\x0b\xfe\x14\x7d\x18\x30\x9e\x0b\x09\xa7\xd3\xe9\x84\x8c\xe3\x43\xdd\x8a\x65\x06\x9d\xce\x58\x2d\x0a\xa4\x69\x69\xac\xca\x51\x53\xc1\xe1\x2c\x4a\xc8\x55\x32\xdc\x3d\x33\xe5\xd2\xa4\x5a\x14\x56\x28\xd9\x79\x9e\x31\x63\x69\xc1\xb6\x39\x4a\x4b\x5d\x7e\xed\xdc\x86\x61\x80\x39\x13\x59\x2d\xdf\xa5\xe0\x82\x2e\xe2\xe8\x97\x05\x81\xbe\x17\x0c\xc2\xc1\x49\x18\x8e\x46\x90\xa9\xb5\x90\x60\xd5\x06\xa5\x01\xa6\x11\x94\xc4\x91\x15\x39\x36\x6b\xa5\x41\x0e\x56\xd5\x42\xb1\x02\xc5\x4a\x7b\x0d\xef\xbf\x7f\x0b\xc2\x80\x54\xd6\x2b\xba\x94\xbc\x96\xd6\x07\x3c\x0b\x56\xe0\x40\xd3\x66\xdf\x8c\x5c\x90\x19\x89\xcf\xc8\xbc\x36\x40\xfb\xbd\xfe\x63\xaa\x01\xde\x16\x42\xa3\x79\x9c\x1e\xbe\x83\x28\x4e\xc8\xec\xd7\xf1\x04\x7a\xef\x7f\x80\x0f\xd3\xc5\x6c\xde\x73\x69\xfa\x17\x62\x6b\x94\x16\xf6\xd0\x04\xa2\x80\xb3\xe8\x7c\xd6\x79\x2b\x5f\xbc\x4a\xd9\x04\x40\x99\x2a\x8e\xfd\x35\x4a\xaa\x99\xe4\x2a\xa7\xcb\xad\x45\xd3\x7f\xf7\xe3\x60\x08\xbd\x6b\xbc\xed\xd5\x85\xe3\x0f\x58\xd0\xb3\xaf\x81\xd5\xae\x88\xe2\x73\x72\xd5\xe1\x56\xfd\x50\xc1\x6f\x61\x1a\xef\x11\xf5\xbf\xb5\x81\x0c\x1a\x23\x54\xc7\x42\x8d\x65\x9c\x51\x50\x5a\x91\x3a\x97\xd6\x3a\xd3\x75\x4a\xb3\xfa\xcd\xbb\xe4\x89\x78\x37\xb8\x6d\x7a\xf4\x69\x78\x59\x6a\xc5\x0d\xde\x0f\xd8\xea\xf2\x7e\xbe\x4d\xb5\xe9\x06\xb7\x0d\xd9\x3b\x02\x1b\xdc\xd6\x4c\x57\x2a\xe3\xae\x80\x6d\x98\x39\x13\xd2\x32\x21\x21\x55\x59\x86\xa9\xf5\x7b\xd4\x0a\x56\x88\x7c\x0f\x6a\xb3\xfd\x65\x99\x2e\xe6\x64\x36\x6f\xd7\xf5\x15\x06\xba\x64\x39\x76\x79\xee\x34\x3d\x8e\x2b\x56\x66\xb6\xd7\x9e\xad\x75\xee\x43\x70\x1b\x77\x33\xd6\x97\xc8\x17\x53\x48\x2e\x6e\x04\x2f\x59\x76\xb4\x6e\x5e\xf7\x7f\xbd\xdc\x8a\xac\x74\x37\xc0\xbe\xbb\x4b\x9d\x1d\xac\x59\x61\x33\xdc\x5f\x0d\x83\xa2\x5c\x66\x22\x7d\xa6\x77\x7d\x71\x68\x95\x04\x2d\x75\x46\xab\xd3\x68\x29\xc5\xdf\x8d\x97\xeb\x02\x56\xa2\x21\x94\x3a\x1b\xc0\x6f\x1f\xc8\x8c\x40\x25\xbe\xc3\x41\x1b\x8f\x0a\x03\x0c\xfe\x52\xee\x0e\x64\xcb\x0c\x61\x89\xf6\x33\xa2\x6c\x98\x49\xde\xb8\xf9\x10\x15\x6d\xf9\xfc\xb1\x83\x28\xa8\xf6\x1c\x93\x36\xa7\xb5\xc5\x2e\xca\x31\xa9\x4f\xee\x15\xc7\x5b\x18\x14\x5a\x28\x2d\xec\xd6\x5d\x6f\x87\xb2\xb7\x4e\x32\x1a\x01\x17\xa6\xc8\xd8\x16\xec\xb5\x30\x3e\x4b\xa8\x07\x06\x2b\xdc\x18\x51\x1a\x56\x65\x96\x41\xae\x38\x86\x41\x2d\xa6\xee\xdf\x7d\x4d\xe6\xe4\xbe\xc3\xda\xad\x70\xd7\x66\xbb\x6a\x0e\xa1\xae\xd5\xa0\x6d\xa0\x8a\x55\xa1\x8c\x7d\xee\x30\xea\x10\xd8\xa5\x77\x80\xa2\x2f\xf8\xeb\x34\x61\xaa\xa4\x75\x1f\x7e\xd7\xcc\x5c\x1f\x7e\xe4\x1d\x6f\xbc\xc0\xdd\xc3\x4a\xdf\x57\xe2\xde\x30\x0c\x96\x8a\x6f\x1f\xd3\xd9\xee\x6b\xc8\x6a\x06\x3f\xcd\xa7\xf1\x69\x7b\xf0\xb5\xf3\xea\x20\xa8\x9a\xd7\x23\xa0\x75\x31\x7d\xab\xd6\x50\x1a\x6a\x55\x67\x6a\x64\x1c\x8c\x65\xb6\x34\x68\xc0\x6a\x96\x6e\x84\x5c\x77\x69\x3a\x0d\xdd\x69\xfa\x61\xe0\x4e\xfa\x57\x44\x3e\xd4\xfe\xc5\x72\x4c\xe8\x9b\xf5\x19\x18\xf7\xdc\x59\x27\x34\x84\x3a\xe0\x11\x4b\x9a\x54\xb3\x02\x5f\xc4\x94\x2f\xe6\x45\x94\xfc\x40\x5d\x5b\x6e\x25\xd6\x15\xf2\x3b\xd7\x7c\xf9\xea\xdb\x92\x33\x5b\xe6\xc6\x0f\x85\xd6\x2c\x08\x2c\x33\x9b\x83\xd5\x30\x40\xad\x95\x36\xde\x54\x7f\xfc\x79\xc4\x8a\x5f\xbe\xf6\xc2\xc1\xc9\x3f\x01\x00\x00\xff\xff\x21\x86\x7f\x3c\x6e\x0e\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 3694, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
