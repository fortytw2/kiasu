// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x61\x6f\xdb\x36\x10\xfd\x2c\xfd\x8a\x43\xbf\xc8\x46\xed\xc1\x29\x86\x0d\x6b\x3e\xb9\x09\xbb\x6a\x4b\xe4\x4e\x92\xd7\x74\xc3\x20\x30\xe2\xd9\xe1\x22\x93\x1a\x49\xb5\xf1\x86\xfd\xf7\x81\x94\xe4\x48\x96\xd3\x26\xc1\x16\x74\x40\x00\x3b\xe4\x23\x79\xbc\xf7\xde\x1d\x7d\x12\x93\x79\x4a\x80\x5c\xa4\x24\x4a\xc2\x45\x04\xe1\x6b\x88\x16\x29\x90\x8b\x30\x49\x13\x28\xd7\xb9\xda\x96\x46\x1e\xfb\x9f\x01\x3e\xab\x2a\xce\xa6\x52\xeb\xf2\xd9\x67\xb1\x39\x37\x78\x63\x8e\xfd\x16\x97\xce\x5f\x9d\x11\xa8\x34\x2a\x0d\x23\xdf\xe3\x0c\x96\xcb\xf0\x14\xde\xc6\xe1\xf9\x3c\x7e\x0f\x3f\x92\xf7\x70\x4a\x5e\xcf\x97\x67\x29\xd8\x53\xb2\x35\x0a\x54\xd4\x60\xf6\xe1\x68\x93\x8f\xc6\x13\xdf\xf7\x72\x85\xd4\x20\xcb\xa8\x81\x34\x3c\x27\x49\x3a\x3f\x7f\x9b\xfe\xe2\x0e\x8d\x96\x67\x67\xbb\xf5\x42\x7e\xb4\x0b\xbc\xaa\x64\x0f\xc1\xfb\x1e\x65\x1b\x2e\xe0\xd5\x62\x71\x46\xe6\xd1\x10\xb7\xa2\x85\x46\x8b\xd3\x46\xf1\x12\xb3\xbc\xd2\x46\x6e\x50\x65\x9c\xc1\x49\x98\x92\x8b\x74\xb2\x9b\xd3\xd5\xa5\xce\x15\x2f\x0d\x97\xa2\x37\x5f\x50\x6d\xb2\x92\x6e\x37\x28\x4c\x66\xe3\xeb\xc6\x36\xf1\x3d\xdc\x50\x5e\x34\xf0\x5d\x08\xf6\xd0\x65\x14\xfe\xb4\x24\x30\x72\x80\xb1\x3f\x3e\xf6\xfd\xe9\x14\x0a\xb9\xe6\x02\x8c\xbc\x46\xa1\x81\x2a\x04\x29\x70\x6a\xf8\x06\xdb\xb1\x4a\x23\x03\x23\x1b\x20\x5f\x81\xa4\x95\xb9\x82\x17\x5f\xcd\x80\x6b\x10\xd2\x38\x44\x9f\x25\x87\xcd\x9a\x0d\x1e\x45\x96\x67\x89\xce\xda\x75\x31\x79\x4d\x62\x12\x9d\x90\xa4\x11\x40\xf7\x5e\xff\x31\xab\x1e\xde\x94\x5c\xa1\xbe\x1f\x1e\x9e\x43\x18\xa5\x24\xfe\x79\x7e\x06\xc1\x8b\xaf\xe1\xcd\x62\x19\x27\x81\x0d\xd3\x5d\x88\xae\x51\x18\xd8\xa3\xc6\xe3\x25\x9c\x84\xa7\x71\xef\x56\x2e\x79\x35\xb2\x3d\x00\x45\x2e\x19\x8e\xd6\x28\x32\x45\x05\x93\x9b\xec\x72\x6b\x50\x8f\x8e\xbe\x19\x4f\x20\xb8\xc2\x9b\xa0\x49\x1c\xfb\x8c\x04\x1d\xf7\x0d\x61\x8d\x2a\xc2\xe8\x94\x5c\xf4\x78\xab\x3f\x32\xce\x6e\x60\x11\xed\x31\xea\x3e\x1b\x01\x69\xd4\x9a\xcb\x9e\x84\x5a\xc9\x58\xa1\xa0\x30\x3c\xb7\x2a\x6d\x70\xba\xaf\x94\x76\xf4\x7f\xaf\x92\x07\xd2\x7b\x8d\xdb\xd6\xa3\x0f\xa3\x97\xe6\x86\x7f\xc0\xbb\x09\x36\xaa\xba\x9b\xdf\x36\xdb\xd9\x35\x6e\x5b\x66\x6f\x19\xb8\xc6\x6d\xc3\xe9\x4a\x16\xcc\x26\xb0\x4b\xe6\x86\x72\x61\x28\x17\x90\xcb\xa2\xc0\xdc\xb8\x35\x72\x05\x2b\x44\xb6\x47\x6a\xbb\xfc\xdf\xe5\x74\x99\x90\x38\xe9\xe6\xf5\x09\x0a\xba\xa0\x1b\xec\xf3\xb9\xc3\x04\x0c\x57\xb4\x2a\x4c\xd0\xad\xad\x4d\xec\x13\xb0\x0b\x77\x35\xd6\xa5\xc8\x25\x93\x0b\xc6\x3f\x70\x56\xd1\xe2\x60\xde\x1c\xee\x4b\x6d\x6e\x65\x51\xd9\x0e\xb0\xaf\xee\x4a\x15\x83\x31\xc3\x4d\x81\xfb\xa3\xbe\x57\x56\x97\x05\xcf\x1f\xa9\x5d\x97\x9c\xac\x0e\x22\xab\x54\x91\xd5\xbb\x65\x95\xe0\x7f\xb4\x5a\x6e\x12\x58\x83\x26\x50\xa9\x62\x0c\xef\xde\x90\x98\x40\x0d\xbe\xa5\x23\x6b\x35\xca\x35\x50\xf8\x5d\xda\x1e\x48\x2f\x0b\x84\x4b\x34\x1f\x11\x45\xcb\x99\x60\xad\x9a\x87\x54\x65\x1d\x9d\xdf\xb7\x10\x79\xf5\x9a\x43\xd0\x76\xb7\x2e\xd8\x9e\x72\x08\xea\x82\x7b\xc2\xf2\xe6\x7b\xa5\xe2\x52\x71\xb3\xb5\xed\x6d\x08\x9b\x59\xc8\x74\x0a\x8c\xeb\xb2\xa0\x5b\x30\x57\x5c\xbb\x28\xa1\x29\x18\xb4\xb4\x65\x44\x2a\x58\x55\x45\x01\x1b\xc9\xd0\xf7\x1a\x70\x66\xff\xbb\xcb\x64\x16\xee\x1c\xd6\xb5\xc2\xad\xcd\x76\xd9\x9c\x40\x93\xab\x71\x57\x40\x35\x57\xa5\xd4\xe6\xb1\xc5\xa8\xc7\xc0\x2e\xbc\x01\x15\x23\xce\x9e\xc2\x84\x9e\xbd\xca\x3d\xe0\xc1\xec\x68\x3a\x3b\x9a\x1e\x7d\xf7\xed\x0c\x66\xb3\x97\xee\x2f\x78\xf9\xd2\x3e\xeb\xb4\xa1\x9b\xd2\xfc\xe9\x82\x95\xc2\xd8\x47\xe4\x15\xd5\x57\xc3\x07\xe3\x61\x13\x7b\xb6\xa7\x4b\x75\x17\x5d\xc1\xc4\xf7\x2e\x25\xdb\xde\xa7\x4a\xd8\x97\x95\x51\x14\x7e\x48\x16\xd1\xab\x6e\x11\xed\xc6\xd5\xa3\xb3\x2e\x04\x8e\xce\xac\x21\xc6\xd9\xbe\x21\xb8\x55\x40\xed\x72\x85\x94\x81\x36\xd4\x54\x1a\x35\x18\x45\xf3\x6b\x2e\xd6\x7d\x65\x58\x4c\xb6\xc3\x8c\xea\xfc\x7e\x92\x6e\x77\xd4\x7e\x93\x3a\x04\x74\xc6\x7f\x84\x24\xf6\x94\xde\x04\x34\x81\xe6\xc0\xbe\xbc\xdf\xbf\x25\xa0\x73\x45\xed\xef\x05\x63\x1f\x59\xf3\x04\x48\xb4\x3c\xb7\x57\x09\xde\xcd\xc3\x34\x8c\xbe\xb7\x94\x04\xf1\x32\x8a\xda\xef\x24\x8e\x17\x31\x39\x75\xdf\x93\xe5\xc9\x09\x49\x92\x60\x68\x9a\x7a\xdb\x2f\xd3\x36\xbe\xa7\xf3\x2b\x64\x55\x81\x8e\x3d\x65\xee\xed\x1f\x87\x1e\x1e\xb4\xd3\xaf\x75\xcc\xd4\x99\x67\xe7\x9b\xe7\x7d\xeb\xec\xb9\xc8\x43\xc1\xee\x63\xc8\x07\x6f\xec\x62\xb5\xcf\xe6\x2e\xbd\xc3\x7d\x3b\x24\xa3\x52\x52\x69\xe7\xb2\x5f\x7f\x3b\x00\xfd\xeb\xef\xe0\x13\x6d\x3c\x97\x62\xc5\xd7\xb5\x19\x07\x6b\x8c\x34\xb4\xb0\x3f\x36\xab\x8d\x76\x0d\xa0\x53\xf7\x9b\x49\x85\x46\x71\xbc\x6b\xd6\x50\x7d\x3d\x98\xbb\x75\x7c\xdb\xb0\x87\xb4\x4e\xa0\x0e\xec\x40\x1d\x68\x14\x9a\x95\xf6\x3d\xaa\x76\xcf\xd9\x56\xb7\xd6\x34\x87\xf6\x73\x99\x9c\x40\x9d\xad\xf1\xf1\x3f\x01\x00\x00\xff\xff\xed\xc4\xaa\x72\xdb\x10\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 4315, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
