// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\x4b\x6f\xe3\x36\x14\x85\xd7\xd2\xaf\xb8\x98\x8d\x6d\xd4\x2e\x66\x06\x45\x37\xb3\x72\x12\x06\xa3\xd6\x91\xa7\xb2\xdc\x66\xba\x21\x68\xf1\xda\x61\x43\x91\x2a\x1f\x99\xf8\xdf\x17\x94\x25\x45\x7e\xa4\x79\xa0\x0d\xda\x95\x61\xe9\x50\xbc\x3a\xdf\xb9\x97\x3a\xcf\xc8\x34\x27\x40\xae\x73\x92\x2e\x92\x79\x0a\xc9\x25\xa4\xf3\x1c\xc8\x75\xb2\xc8\x17\x50\x6d\x0a\xb3\xad\x9c\xfe\x14\x3f\x21\x7c\xe7\xbd\xe0\x13\x6d\x6d\xf5\xee\x49\x6d\x21\x1c\xde\xbb\x4f\x71\xab\xcb\xa7\x67\x33\x02\xde\xa2\xb1\x30\x8c\x23\xc1\x61\xb9\x4c\x2e\xe0\x4b\x96\x5c\x4d\xb3\xaf\xf0\x33\xf9\x0a\x17\xe4\x72\xba\x9c\xe5\x10\x76\xa1\x1b\x54\x68\x98\x43\x7a\xf7\xa1\x2c\x86\xa3\x71\x1c\x47\x85\x41\xe6\x90\x53\xe6\x20\x4f\xae\xc8\x22\x9f\x5e\x7d\xc9\x7f\xaf\x37\x4d\x97\xb3\x59\xb7\x5e\xe9\x6f\x61\x41\xe4\x2b\xfe\x12\x7d\x1c\x31\x5e\x0a\x05\x67\xf3\xf9\x8c\x4c\xd3\x63\xdd\x9a\x49\x8b\x41\x67\x9d\x11\x15\xd2\xc2\x5b\xa7\x4b\x34\x54\x70\x38\x4f\x72\x72\x9d\x8f\xbb\x7b\xd6\xaf\x6c\x61\x44\xe5\x84\x56\x7b\xf7\x25\xb3\x8e\x56\x6c\x5b\xa2\x72\x34\xd4\xd7\xaf\x6d\x1c\x47\x58\x32\x21\x1b\x79\x57\x42\xd8\x74\x99\x26\xbf\x2c\x09\x0c\x6b\xc1\x28\x1e\x7d\x8a\xe3\xc9\x04\xa4\xde\x08\x05\x4e\xdf\xa2\xb2\xc0\x0c\x82\x56\x38\x71\xa2\xc4\xf6\x9a\xb7\xc8\xc1\xe9\x46\x28\xd6\xa0\x99\x77\x37\xf0\xf1\xfb\xf7\x20\x2c\x28\xed\x6a\xc5\x3e\xa5\x5a\x4b\x9b\x07\xbc\x0a\x56\x14\x40\xd3\x76\x5d\x46\x2e\x49\x46\xd2\x73\xb2\x68\x02\xd0\x7f\xaf\x7f\x99\x6a\x84\xf7\x95\x30\x68\x9f\xa7\x87\xef\x20\x49\x73\x92\xfd\x3a\x9d\xc1\xe0\xe3\x0f\xf0\x79\xbe\xcc\x16\x83\x50\x66\xfd\x42\x6c\x83\xca\xc1\x01\x9a\x48\x54\x70\x9e\x5c\x64\x7b\x6f\x55\x9b\xb7\x53\xb6\x1b\xa0\x2a\x34\xc7\xe1\x06\x15\x35\x4c\x71\x5d\xd2\xd5\xd6\xa1\x1d\x7e\xf8\x71\x34\x86\xc1\x0d\xde\x0f\x1a\xe3\xf8\x13\x11\xac\xd9\x37\xc0\x9a\x54\x24\xe9\x05\xb9\xde\xe3\xb6\xfb\xa1\x82\xdf\xc3\x3c\x3d\x20\x5a\xff\x36\x01\xb2\x68\xad\xd0\x7b\x11\x6a\x23\x13\x82\x82\xca\x89\x22\xa4\xb4\xd1\xd9\xfd\xa4\xb4\x57\xff\xf7\x29\x79\x21\xde\x5b\xdc\xb6\x3d\xfa\x32\xbc\xac\x70\xe2\x0e\x1f\x07\xec\x8c\x7f\x9c\x6f\xeb\x36\xbd\xc5\x6d\x4b\xf6\x81\xc0\x2d\x6e\x1b\xa6\x6b\x2d\x79\x30\xb0\x0f\xb3\x64\x42\x39\x26\x14\x14\x5a\x4a\x2c\x5c\xbd\x46\xaf\x61\x8d\xc8\x0f\xa0\xb6\xcb\xff\x59\xa6\xcb\x05\xc9\x16\x7d\x5f\xdf\x60\xa0\x2b\x56\xe2\x3e\xcf\x4e\x33\xe0\xb8\x66\x5e\xba\x41\x7f\xb6\x36\xb5\x8f\x21\x2c\xec\x66\x6c\x6d\x51\x6d\xa6\x50\x5c\xdc\x09\xee\x99\x3c\xe9\x5b\xad\xfb\xaf\x1e\x6e\x95\xf4\xe1\x04\x38\x4c\xb7\x37\xf2\xe8\x9a\x13\x4e\xe2\xe1\xd5\x38\xaa\xfc\x4a\x8a\xe2\x95\xd9\xad\xcd\xa1\xbb\x22\xa8\x37\x92\xee\x9e\x46\xbd\x12\x7f\xb6\x59\x6e\x0c\xdc\x89\xc6\xe0\x8d\x1c\xc1\x6f\x9f\x49\x46\x60\x27\x7e\xc0\x41\xdb\x8c\x0a\x0b\x0c\xfe\xd0\xe1\x0c\x64\x2b\x89\xb0\x42\xf7\x0d\x51\xb5\xcc\x14\x6f\xd3\x7c\x8c\x8a\xf6\x72\xfe\xdc\x41\x14\xed\xd6\x9c\x92\xb6\x4f\xeb\x8b\xc3\x2e\xa7\xa4\x75\x71\x6f\x38\xde\xe2\xa8\x32\x42\x1b\xe1\xb6\xe1\x78\x3b\x96\xbd\x0f\x92\xc9\x04\xb8\xb0\x95\x64\x5b\x70\x37\xc2\xd6\x55\x42\x33\x30\x58\x15\xc6\x88\x36\xb0\xf6\x52\x42\xa9\x39\xc6\x51\x23\xa6\xe1\xdf\x63\x4d\x16\xe4\x75\x87\xf5\x5b\xe1\xa1\xcd\x3a\x37\xc7\xd0\x78\x35\xea\x07\x68\xc7\xaa\xd2\xd6\xbd\x76\x18\xfd\x2d\x81\x37\x31\xbe\xd0\xca\x85\x4f\xbd\x1b\x66\x6f\x8e\x3f\xeb\x4e\xb7\x5a\x14\x4e\x5e\x6d\x1e\x33\x75\x30\x8e\xa3\x95\xe6\xdb\xe7\xf4\x72\xf8\xfe\x71\x86\xc1\x4f\x8b\x79\x7a\xd6\x1f\x75\xfd\xba\xba\x49\x67\x90\x71\xb0\x8e\x39\x6f\xd1\x82\x33\xac\xb8\x15\x6a\xb3\x8f\x23\x68\x68\xa7\x19\xc6\x51\xe0\xd3\x79\xdc\x55\xdb\x33\xbb\x06\x78\x78\x32\x9c\x12\xd6\xdd\xf6\x0a\x2a\x07\xf1\x6a\x0a\x1a\x43\xb3\x61\x78\xbd\xbf\x02\x00\x00\xff\xff\x5e\xf1\x77\x91\x03\x0d\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 3331, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
