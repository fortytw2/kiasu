// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x61\x6f\xdb\x36\x10\xfd\x2c\xfd\x8a\x43\xbf\xc8\x46\xed\xc1\x29\x86\x0d\x6b\x3e\xb9\x09\xbb\x6a\x4b\xe4\x4e\x92\xd7\x74\xc3\x20\x30\xe2\xd9\xe1\x22\x93\x1a\x49\xb5\xf1\x86\xfd\xf7\x81\x94\xe4\x48\x96\xd3\x26\xc1\x16\x74\x80\x01\xdb\xe2\x23\x79\xbc\xf7\xde\x1d\x75\x12\x93\x79\x4a\x80\x5c\xa4\x24\x4a\xc2\x45\x04\xe1\x6b\x88\x16\x29\x90\x8b\x30\x49\x13\x28\xd7\xb9\xda\x96\x46\x1e\xfb\x9f\x01\x3e\xab\x2a\xce\xa6\x52\xeb\xf2\xd9\x67\xb1\x39\x37\x78\x63\x8e\xfd\x16\x97\xce\x5f\x9d\x11\xa8\x34\x2a\x0d\x23\xdf\xe3\x0c\x96\xcb\xf0\x14\xde\xc6\xe1\xf9\x3c\x7e\x0f\x3f\x92\xf7\x70\x4a\x5e\xcf\x97\x67\x29\xd8\x5d\xb2\x35\x0a\x54\xd4\x60\xf6\xe1\x68\x93\x8f\xc6\x13\xdf\xf7\x72\x85\xd4\x20\xcb\xa8\x81\x34\x3c\x27\x49\x3a\x3f\x7f\x9b\xfe\xe2\x36\x8d\x96\x67\x67\xbb\xf9\x42\x7e\xb4\x13\xbc\xaa\x64\x0f\xc1\xfb\x1e\x65\x1b\x2e\xe0\xd5\x62\x71\x46\xe6\xd1\x10\xb7\xa2\x85\x46\x8b\xd3\x46\xf1\x12\xb3\xbc\xd2\x46\x6e\x50\x65\x9c\xc1\x49\x98\x92\x8b\x74\xb2\x1b\xd3\xd5\xa5\xce\x15\x2f\x0d\x97\xa2\x37\x5e\x50\x6d\xb2\x92\x6e\x37\x28\x4c\x66\xe3\xeb\xc6\x36\xf1\x3d\xdc\x50\x5e\x34\xf0\x5d\x08\x76\xd3\x65\x14\xfe\xb4\x24\x30\x72\x80\xb1\x3f\x3e\xf6\xfd\xe9\x14\x0a\xb9\xe6\x02\x8c\xbc\x46\xa1\x81\x2a\x04\x29\x70\x6a\xf8\x06\xdb\x67\x95\x46\x06\x46\x36\x40\xbe\x02\x49\x2b\x73\x05\x2f\xbe\x9a\x01\xd7\x20\xa4\x71\x88\x3e\x4b\x0e\x9b\x35\x0b\x3c\x8a\x2c\xcf\x12\x9d\xb5\xf3\x62\xf2\x9a\xc4\x24\x3a\x21\x49\x23\x80\xee\xb9\xfe\x63\x56\x3d\xbc\x29\xb9\x42\x7d\x3f\x3c\x3c\x87\x30\x4a\x49\xfc\xf3\xfc\x0c\x82\x17\x5f\xc3\x9b\xc5\x32\x4e\x02\x1b\xa6\x3b\x10\x5d\xa3\x30\xb0\x47\x8d\xc7\x4b\x38\x09\x4f\xe3\xde\xa9\x5c\xf2\x6a\x64\xbb\x01\x8a\x5c\x32\x1c\xad\x51\x64\x8a\x0a\x26\x37\xd9\xe5\xd6\xa0\x1e\x1d\x7d\x33\x9e\x40\x70\x85\x37\x41\x93\x38\xf6\x19\x09\x3a\xee\x1b\xc2\x1a\x55\x84\xd1\x29\xb9\xe8\xf1\x56\x7f\x65\x9c\xdd\xc0\x22\xda\x63\xd4\x7d\x37\x02\xd2\xa8\x35\x97\x3d\x09\xb5\x92\xb1\x42\x41\x61\x78\x6e\x55\xda\xe0\x74\x5f\x29\xed\xd3\xff\xbd\x4a\x1e\x48\xef\x35\x6e\x5b\x8f\x3e\x8c\x5e\x9a\x1b\xfe\x01\xef\x26\xd8\xa8\xea\x6e\x7e\xdb\x6c\x67\xd7\xb8\x6d\x99\xbd\x65\xe0\x1a\xb7\x0d\xa7\x2b\x59\x30\x9b\xc0\x2e\x99\x1b\xca\x85\xa1\x5c\x40\x2e\x8b\x02\x73\xe3\xe6\xc8\x15\xac\x10\xd9\x1e\xa9\xed\xf4\x7f\x97\xd3\x65\x42\xe2\xa4\x9b\xd7\x27\x28\xe8\x82\x6e\xb0\xcf\xe7\x0e\x13\x30\x5c\xd1\xaa\x30\x41\xb7\xb6\x36\xb1\x4f\xc0\x4e\xdc\xd5\x58\x97\x22\x97\x4c\x2e\x18\xff\xc0\x59\x45\x8b\x83\x79\x73\xb8\x2f\xb5\xb9\x95\x45\x65\x3b\xc0\xbe\xba\x2b\x55\x0c\x9e\x19\x6e\x0a\xdc\x7f\xea\x7b\x65\x75\x59\xf0\xfc\x91\xda\x75\xc9\xc9\xea\x20\xb2\x4a\x15\x59\xbd\x5a\x56\x09\xfe\x47\xab\xe5\x26\x81\x35\x68\x02\x95\x2a\xc6\xf0\xee\x0d\x89\x09\xd4\xe0\x5b\x3a\xb2\x56\xa3\x5c\x03\x85\xdf\xa5\xed\x81\xf4\xb2\x40\xb8\x44\xf3\x11\x51\xb4\x9c\x09\xd6\xaa\x79\x48\x55\xd6\xd1\xf9\x7d\x0b\x91\x57\xcf\x39\x04\x6d\x57\xeb\x82\xed\x2e\x87\xa0\x2e\xb8\x27\x2c\x6f\xbe\x57\x2a\x2e\x15\x37\x5b\xdb\xde\x86\xb0\x99\x85\x4c\xa7\xc0\xb8\x2e\x0b\xba\x05\x73\xc5\xb5\x8b\x12\x9a\x82\x41\x4b\x5b\x46\xa4\x82\x55\x55\x14\xb0\x91\x0c\x7d\xaf\x01\x67\xf6\xdf\x5d\x26\xb3\x70\xe7\xb0\xae\x15\x6e\x6d\xb6\xcb\xe6\x04\x9a\x5c\x8d\xbb\x02\xaa\xb9\x2a\xa5\x36\x8f\x2d\x46\x3d\x06\x76\xe1\x0d\xa8\x18\x71\xf6\x14\x26\xf4\xec\x51\xee\x01\x0f\x66\x47\xd3\xd9\xd1\xf4\xe8\xbb\x6f\x67\x30\x9b\xbd\x74\x9f\xe0\xe5\x4b\x7b\xad\xd3\x86\x6e\x4a\xf3\xa7\x0b\x56\x0a\x63\x2f\x91\x57\x54\x5f\x0d\x2f\x8c\x87\x4d\xec\xd9\x9e\x2e\xd5\x5d\x74\x05\x13\xdf\xbb\x94\x6c\x7b\x9f\x2a\x61\x6f\x56\x46\x51\xf8\x21\x59\x44\xaf\x7a\x45\x54\x15\xf6\xac\xed\xdf\x6e\x98\x3d\x76\xeb\xba\xe0\xd8\xcd\x1a\x9e\x5c\x15\x68\xf8\x6e\x05\x51\x9b\x5e\x21\x65\xa0\x0d\x35\x95\x46\x0d\x46\xd1\xfc\x9a\x8b\x75\x5f\x28\x16\x93\xed\x30\xa3\x3a\xdd\x9f\x64\xdf\x6d\xb5\xdf\xb3\x0e\x01\x5d\x1d\x78\x84\x42\xf6\x84\xdf\x04\x34\x81\x66\xc3\xbe\xda\xdf\xbf\x25\xa0\x73\x45\xed\xeb\x83\xb1\x77\xae\x79\x02\x24\x5a\x9e\xdb\xa3\x04\xef\xe6\x61\x1a\x46\xdf\x5b\x86\x82\x78\x19\x45\xed\x6f\x12\xc7\x8b\x98\x9c\xba\xdf\xc9\xf2\xe4\x84\x24\x49\x30\xf4\x50\xbd\xec\x97\xe9\x22\xdf\xd3\xf9\x15\xb2\xaa\x40\xc7\x9e\x32\xf7\xb6\x93\x43\x0f\x37\xda\xc9\xd9\x1a\x68\xea\xbc\xb4\xb3\xd1\xf3\xbe\x93\xf6\x4c\xe5\xa1\x60\xf7\xf1\xe7\x83\x17\x76\xb1\xda\x5b\x74\x97\xde\xe1\xba\x1d\x92\x51\x29\xa9\xb4\x33\xdd\xaf\xbf\x1d\x80\xfe\xf5\x77\xf0\x89\xae\x9e\x4b\xb1\xe2\xeb\xda\x9b\x83\x39\x46\x1a\x5a\xd8\x77\xcf\x6a\xa3\x5d\x3f\xe8\xb4\x81\x66\x50\xa1\x51\x1c\xef\x1a\x35\x54\x5f\x0f\xc6\x6e\x1d\xdf\xf6\xef\x21\xad\x13\xa8\x03\x3b\x50\x07\x1a\x85\x66\xa5\xbd\x9e\xaa\xdd\xed\xb6\xd5\xad\x35\xcd\xa1\xf5\x5c\x26\x27\x50\x67\x6b\x7c\xfc\x4f\x00\x00\x00\xff\xff\xdb\xd9\x41\x07\xea\x10\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 4330, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
