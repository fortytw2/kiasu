// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\x4b\x6f\xe3\x36\x10\xc7\xcf\xd2\xa7\x18\xec\xc5\x36\x6a\x17\xbb\x8b\xa2\x97\x9c\x9c\x84\xc1\xaa\x75\xe4\xad\x2d\xb7\xd9\x16\x05\x41\x8b\x63\x87\xb5\x44\xaa\x7c\x64\x63\x2c\xf6\xbb\x17\xa4\x25\x47\x7e\xa4\x79\x20\x0d\xba\x27\xc3\xd4\x7f\xc4\xd1\xfc\xfe\x33\xe4\xd9\x84\x0c\x33\x02\xe4\x2a\x23\xe9\x34\x19\xa7\x90\x5c\x40\x3a\xce\x80\x5c\x25\xd3\x6c\x0a\xd5\x32\xd7\xeb\xca\xaa\x93\xf8\x01\xe1\x1b\xe7\x04\x1f\x28\x63\xaa\x37\x0f\x6a\x73\x61\xf1\xd6\x9e\xc4\x8d\x2e\x1b\x9e\x8e\x08\x38\x83\xda\x40\x37\x8e\x04\x87\xd9\x2c\x39\x87\x8f\x93\xe4\x72\x38\xf9\x04\x3f\x93\x4f\x70\x4e\x2e\x86\xb3\x51\x06\x7e\x17\xba\x44\x89\x9a\x59\xa4\x37\xef\xca\xbc\xdb\xeb\xc7\x71\x94\x6b\x64\x16\x39\x65\x16\xb2\xe4\x92\x4c\xb3\xe1\xe5\xc7\xec\xf7\xb0\x69\x3a\x1b\x8d\xb6\xf1\x52\x7d\xf6\x01\x91\xab\xf8\x53\xf4\x71\xc4\x78\x29\x24\x9c\x8e\xc7\x23\x32\x4c\x0f\x75\x0b\x56\x18\xf4\x3a\x63\xb5\xa8\x90\xe6\xce\x58\x55\xa2\xa6\x82\xc3\x59\x92\x91\xab\xac\xbf\x7d\x66\xdc\xdc\xe4\x5a\x54\x56\x28\xb9\xf3\xbc\x60\xc6\xd2\x8a\xad\x4b\x94\x96\xfa\xfc\xda\xb9\xf5\xe3\x08\x4b\x26\x8a\x5a\xbe\x4d\xc1\x6f\x3a\x4b\x93\x5f\x66\x04\xba\x41\xd0\x8b\x7b\x27\x71\x3c\x18\x40\xa1\x96\x42\x82\x55\x2b\x94\x06\x98\x46\x50\x12\x07\x56\x94\xd8\xac\x39\x83\x1c\xac\xaa\x85\x62\x01\x8a\x39\x7b\x0d\xef\xbf\x7f\x0b\xc2\x80\x54\x36\x28\x76\x29\x05\x2d\xad\x5f\xf0\x2c\x58\x91\x07\x4d\x9b\xb8\x09\xb9\x20\x13\x92\x9e\x91\x69\x6d\x80\xf6\x77\xfd\xc7\x54\x23\xbc\xad\x84\x46\xf3\x38\x3d\x7c\x07\x49\x9a\x91\xc9\xaf\xc3\x11\x74\xde\xff\x00\x1f\xc6\xb3\xc9\xb4\xe3\xd3\x0c\x1f\xc4\x96\x28\x2d\xec\xa1\x89\x44\x05\x67\xc9\xf9\x64\xe7\xab\x42\xf1\x36\xca\x66\x03\x94\xb9\xe2\xd8\x5d\xa2\xa4\x9a\x49\xae\x4a\x3a\x5f\x5b\x34\xdd\x77\x3f\xf6\xfa\xd0\xb9\xc6\xdb\x4e\x5d\x38\xfe\x80\x05\x03\xfb\x1a\x58\xed\x8a\x24\x3d\x27\x57\x3b\xdc\x36\x3f\x54\xf0\x5b\x18\xa7\x7b\x44\xc3\x6f\x6d\x20\x83\xc6\x08\xb5\x63\xa1\xc6\x32\xde\x28\x28\xad\xc8\xbd\x4b\x6b\x9d\xd9\x75\x4a\xb3\xfa\xcd\xbb\xe4\x89\x78\x57\xb8\x6e\x7a\xf4\x69\x78\x59\x6e\xc5\x0d\xde\x0f\xd8\x6a\x77\x3f\xdf\xa6\xda\x74\x85\xeb\x86\xec\x1d\x81\x15\xae\x6b\xa6\x0b\x55\x70\x5f\xc0\x36\xcc\x92\x09\x69\x99\x90\x90\xab\xa2\xc0\xdc\x86\x18\xb5\x80\x05\x22\xdf\x83\xda\x84\xbf\x2c\xd3\xd9\x94\x4c\xa6\xed\xba\xbe\xc2\x40\x97\xac\xc4\x5d\x9e\x5b\x4d\x87\xe3\x82\xb9\xc2\x76\xda\xb3\xb5\xce\xbd\x0f\x3e\x70\x3b\x63\x43\x89\x42\x31\x85\xe4\xe2\x46\x70\xc7\x8a\xa3\x75\x0b\xba\xff\xeb\xe1\x56\x15\xce\x9f\x00\xfb\xee\x76\xba\x38\x58\xb3\xc2\x16\xb8\xbf\x1a\x47\x95\x9b\x17\x22\x7f\xa6\x77\x43\x71\xe8\x26\x09\xea\x74\x41\x37\x6f\xa3\x4e\x8a\xbf\x1b\x2f\xd7\x05\xdc\x88\xfa\xe0\x74\xd1\x83\xdf\x3e\x90\x09\x81\x8d\xf8\x0e\x07\x6d\x3c\x2a\x0c\x30\xf8\x4b\xf9\x33\x90\xcd\x0b\x84\x39\xda\xcf\x88\xb2\x61\x26\x79\xe3\xe6\x43\x54\xb4\xe5\xf3\xc7\x0e\xa2\x68\x13\x73\x4c\xda\xbc\xad\x2d\xf6\xbb\x1c\x93\x86\xe4\x5e\x71\xbc\xc5\x51\xa5\x85\xd2\xc2\xae\xfd\xf1\x76\x28\x7b\xeb\x25\x83\x01\x70\x61\xaa\x82\xad\xc1\x5e\x0b\x13\xb2\x84\x7a\x60\xb0\xca\x8f\x11\xa5\x61\xe1\x8a\x02\x4a\xc5\x31\x8e\x6a\x31\xf5\xff\xee\x6b\x32\x2f\x0f\x1d\xd6\x6e\x85\xbb\x36\xdb\x56\xb3\x0f\x75\xad\x7a\x6d\x03\x6d\x58\x55\xca\xd8\xe7\x0e\xa3\x1d\x02\xdb\xf4\x0e\x50\x74\x05\x7f\x9d\x26\xcc\x95\xb4\xfe\xe2\x77\xcd\xcc\xf5\xe1\x25\xef\x78\xe3\x45\xfe\x1c\x56\xfa\xbe\x12\x77\xfa\x71\x34\x57\x7c\xfd\x98\xce\xf6\xb7\x21\xab\x19\xfc\x34\x1d\xa7\xa7\xed\xc1\xd7\xce\x6b\x3b\xf7\x34\x32\x0e\xc6\x32\xeb\x0c\x1a\xb0\x9a\xe5\x2b\x21\x97\xbb\x70\xbc\x86\x6e\x35\xdd\x38\xf2\xb4\xfe\xb5\xe2\x01\xe7\xfe\x39\x71\x4c\x18\x7a\xef\x19\x54\xf6\xcc\x56\x27\xd4\x87\x7a\xc3\x23\x0e\x33\xb9\x66\x15\xbe\x88\xc7\x5e\xcc\x5a\x28\xf9\x81\xba\x76\xd0\x42\x2c\x37\x04\xef\x4c\xf0\xe5\x6b\xe8\x32\xce\xac\x2b\x4d\xe8\xf1\x56\x6b\x47\x96\x99\xd5\xc1\x6a\x1c\xa1\xd6\x4a\x9b\xe0\x91\x3f\xfe\x3c\xe2\xac\x2f\x5f\x3b\x71\xef\xe4\x9f\x00\x00\x00\xff\xff\x89\x38\xee\xf4\x3d\x0e\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 3645, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
