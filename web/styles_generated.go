// Code generated by go-bindata.
// sources:
// dist/hydrocarbon.min.css
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distHydrocarbonMinCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x94\xdf\x72\xdb\xb8\x0e\xc6\x5f\x25\x33\x9d\x4c\x6f\x20\x8f\xed\xba\x39\x0d\x35\x73\x9e\x60\xef\xfa\x04\xa0\x08\x4a\x58\x53\x24\x43\x42\xfe\x53\x8d\xde\x7d\x87\x94\x93\x38\x9b\xf6\x62\xaf\x04\x81\x26\x0c\xfc\xbe\x0f\x42\x40\xad\x13\x60\x97\x82\xbf\x8e\x80\xc6\x24\xca\x19\x30\x46\x47\x02\x98\x84\x3b\x47\x80\x99\x0d\x01\x4e\x86\x03\x68\xd0\xdc\x83\x76\xa1\x3b\xbe\x4c\x41\x08\x74\x30\x57\xe8\xd0\x9f\x30\x43\x87\x51\x38\x78\xe8\xc8\x0b\x25\xe8\x58\x08\xba\x60\x08\x8c\x01\x43\x0e\x0c\x09\xb2\xcb\x60\xac\x07\xc3\x27\x30\x0e\x8c\x00\x8d\x40\xa3\x26\x03\x96\xc9\x99\x4c\x02\x96\xfb\xd7\x52\x96\xfb\x29\x11\xd8\x10\x4a\x45\x1b\xd2\x08\xc3\x0e\x86\x3d\x0c\xdf\x60\x38\xc0\xf0\x1d\x86\x27\x18\x08\x0d\x25\x18\xfa\x14\xa6\x08\x83\x8c\x0e\x18\xd8\x26\x1c\x09\x78\xec\x81\x7d\x86\xa3\x36\xe0\x50\x93\x03\x47\x3d\x79\x03\x8e\x61\xc4\x74\x84\x91\xfc\x04\x1e\x4f\x10\xf4\xdf\xd4\x09\x04\x07\x61\x92\x38\x09\x44\x88\x89\xe0\x05\xd2\xa4\xaf\x90\x21\xe3\x18\x21\x53\x57\xfb\xca\x23\x3a\x07\x39\xa2\x87\x2c\x89\x8f\x54\x1e\xc1\xf7\x90\x27\x0d\x79\x1a\x47\x4c\x57\xc8\x53\x04\x41\xed\x08\xa4\x62\x12\x03\x52\x26\x01\x19\x40\x4a\xd3\x20\x3c\x12\x48\x02\x11\x98\x60\x72\x70\xc2\x04\x27\x36\x14\xe6\x11\x53\xcf\x5e\x6d\xdb\x88\xc6\xb0\xef\xd5\xb6\xd5\x21\x19\x4a\x6a\xdb\x9e\xa8\x28\x83\xae\x41\xc7\xbd\x57\x1a\x33\x39\xf6\xd4\xda\xe0\x45\xb1\x1f\x28\xb1\xd4\x97\x26\xf3\x2f\x52\xbb\xed\xf6\x71\xf9\x28\xe6\xab\x12\x7f\x24\xfd\x11\xe9\x1b\xa3\xdb\xf8\xb3\xe1\x1c\x1d\x5e\x55\x35\xc2\x52\x86\x9b\x4b\x07\xcd\x40\xdc\x0f\xa2\x76\x4b\x70\x30\xb9\xd9\x71\x96\x26\xcb\xd5\x91\xf2\xc1\xd3\x72\xe7\x9b\x97\xb9\x3e\xf3\xbf\x0f\x14\xda\xf2\xff\x77\x09\x4d\x36\x14\x1d\x6e\x27\x2f\xb7\xc4\xdc\x05\x2f\xe4\x45\x7d\xfd\xda\xbe\x86\xb5\x56\x25\x3e\xaf\xb0\x9a\x1c\xb1\xbb\xa7\xd7\x74\xc1\x39\x8c\x99\xd4\x6b\xb0\x6c\x0a\x11\x8d\x69\x3e\xb3\x91\x41\x7d\xdb\x3e\x2e\x9b\x5b\xc1\x5b\xea\x7f\xdb\xc7\x76\xd5\xa3\x71\x64\xa5\xfe\xc4\xf1\x1b\x04\xeb\xe8\xb2\x6c\x2c\x91\x69\x06\xf4\xc6\xd1\xdc\x4d\x29\x87\xa4\xc6\x70\xa2\xf6\x16\x37\x67\xd2\x47\x96\xa6\x4f\xa8\x35\xfb\x7e\xd9\xd8\xe0\x4a\x43\xff\xe1\x4a\xe5\xac\xb1\x3b\x16\x55\xbc\x29\xb3\x84\xa4\xbe\x58\x6b\xdb\x5b\xb8\x3b\xec\x7e\xec\xbf\xad\xda\x5b\x1c\xd9\x5d\xd5\x4f\xf4\xb9\xf9\x49\x89\x6d\x2b\x74\x91\x26\x91\x37\x94\x0a\x93\x10\x85\x47\xfe\x45\x7f\x51\xcf\x9a\x1d\xcb\x75\x31\x7c\x7a\x9b\xfd\xe6\xc0\x5d\xa2\xf1\x01\x27\x09\xed\x39\x24\xd3\x9c\x13\x46\xa5\x13\xe1\xb1\x29\xef\xed\x4a\xe8\x79\xfb\x78\x6f\xb8\xa7\x78\x69\x3f\xf8\x61\x73\xa8\xa5\xcb\xfe\xce\xb5\x8b\xd5\xb9\xeb\x87\x62\xe1\x79\xbd\x5b\x8d\xc2\x82\x8e\xbb\x65\xd8\xcd\xef\x05\xf7\x87\x78\x59\x86\xfd\x7d\x66\x1b\x2f\x4b\x2d\x17\x43\xe6\xe2\x49\x95\xc8\xa1\xf0\x89\x16\xf6\x71\x92\x3f\xe5\x15\xfb\x13\x3a\x36\x37\x83\xa8\x5d\xbc\x3c\xe4\xe0\xd8\x3c\x7c\xe9\x68\x6f\x0e\xdb\x65\xdd\x80\xf7\xfb\xa8\x73\x70\x93\x50\x9b\xea\x2c\xc5\x49\x22\x61\x54\xdb\xb6\x9a\xe1\x7d\x43\x0b\xa9\xf6\xd3\x74\xf7\x5c\xf6\xf1\xb2\x7c\x59\x57\x6b\x0e\x27\x4a\xd6\x85\xb3\x1a\xd8\x18\xf2\xed\xef\x16\xfe\x93\xd4\xfb\xc3\xf7\xe7\xe7\xa7\xf6\x7d\xaf\x1a\xb9\xc6\xdb\x72\xdd\x0a\xff\xff\xce\x99\xec\xab\x0a\x75\x99\x5a\xeb\x02\x8a\x2a\x3d\x2f\x8e\x37\x2e\xf4\x61\xe5\x79\x5e\x35\xd2\xd5\x8e\x77\x55\x36\x75\xde\x79\xbd\x56\xe3\xbb\xc3\x07\xfc\xf8\x0d\x78\x87\x70\x88\x97\x87\x6a\x80\x3b\x77\x7e\x86\x52\x33\x86\xba\x90\xb0\x42\xae\x13\x94\xb2\x6a\x28\x60\x7e\xe3\xf2\x9d\x3d\x98\x1f\xbb\xe5\x9f\x00\x00\x00\xff\xff\xdd\x3a\xd0\x9e\xb3\x06\x00\x00")

func distHydrocarbonMinCssBytes() ([]byte, error) {
	return bindataRead(
		_distHydrocarbonMinCss,
		"dist/hydrocarbon.min.css",
	)
}

func distHydrocarbonMinCss() (*asset, error) {
	bytes, err := distHydrocarbonMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/hydrocarbon.min.css", size: 1715, mode: os.FileMode(420), modTime: time.Unix(1485809111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/hydrocarbon.min.css": distHydrocarbonMinCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"hydrocarbon.min.css": &bintree{distHydrocarbonMinCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

