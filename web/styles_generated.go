// Code generated by go-bindata.
// sources:
// dist/hydrocarbon.min.css
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distHydrocarbonMinCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x93\x61\x8e\xdb\x38\x0c\x85\xaf\x52\x20\x58\x74\x0b\x3c\x03\xc9\x24\x1d\xec\xc8\x57\xd8\x7f\x3d\x01\x65\xd1\x36\x37\xb4\xa4\x91\xe8\x74\x52\x23\x77\x5f\xd8\xc9\x14\x9d\xc5\xf6\x97\x44\x49\x26\x1f\xbf\x47\x13\xc8\xfb\x02\xea\x4a\x8a\xd7\x09\x14\x42\xe1\x5a\x41\x39\x2b\x1b\xa8\x98\x74\xca\xa0\x2a\x81\x41\x73\x90\x04\x0f\x2f\x03\xbc\xa6\xee\xfc\x3a\x27\x63\xf8\x14\xae\xe8\x28\x5e\xa8\xa2\xa3\x6c\x92\x22\x3a\x8e\xc6\x05\x9d\x18\xa3\x4b\x81\x11\x02\x02\x2b\x02\x1b\x89\x56\x84\x3e\x22\xc8\x05\x41\x11\x0c\x3c\x81\x27\xcf\x01\xbd\xb0\x86\xca\x86\x5e\x86\xf7\x54\xbd\x0c\x73\x61\xf4\x29\xad\x19\xfb\x54\x26\x8c\x07\x8c\x4f\x18\x8f\x18\x4f\x18\xbf\x62\x7c\xc6\xc8\x14\xb8\x60\x1c\x4a\x9a\x33\x46\x9b\x14\x02\xe9\x0b\x4d\x0c\x99\x06\x48\xac\x38\xfb\x00\x25\xcf\x0a\xe5\x81\x63\x80\x0a\x26\x2a\x67\x4c\x1c\x67\x44\xba\x20\xf9\x7f\xb8\x33\x24\x45\x9a\x2d\xcf\x86\x8c\x5c\x18\xaf\x28\xb3\xbf\xa2\xa2\xd2\x94\x51\xb9\xdb\x74\xd5\x89\x54\x51\x33\x45\x54\x2b\x72\xe6\x75\x49\x71\x40\x9d\x3d\xea\x3c\x4d\x54\xae\xa8\x73\x86\x91\x57\x86\x6d\x98\x2c\xc0\xd6\x4e\x60\x23\x6c\x15\x0d\x93\x89\x61\x05\x66\x98\x31\x2b\x2e\x54\x70\x91\xc0\x69\x99\xa8\x0c\x12\xdd\xbe\xcd\x14\x82\xc4\xc1\xed\x5b\x9f\x4a\xe0\xe2\xf6\x6d\x9f\xa2\x35\x55\x7e\xb0\x3b\xec\xf7\x7f\x6c\xa1\x93\x38\x72\x11\x6b\x2f\xbc\xba\x46\xda\x90\xca\x10\x9d\xa7\xca\x2a\x91\x6f\x1f\xcd\x7c\x77\xe2\xb7\xa4\x3f\x22\xfd\xc9\xe8\xd1\xfe\x12\xa4\x66\xa5\xab\xdb\x06\xe1\xb6\x36\xb7\xac\x55\x9a\x91\x65\x18\xcd\x1d\x6e\x49\x31\xeb\xa2\x52\xad\xa9\x76\x55\x76\x31\x45\xbe\xfd\x32\x37\xaf\xcb\xb6\xd6\xff\x5e\x38\xea\xd7\xfa\xbf\x1c\x78\xee\xd3\xea\xc3\xe3\xe6\xf5\x71\xb0\x74\x29\x1a\x47\x73\x9f\x3f\xb7\xef\xdb\x2d\xd7\x46\x7c\xb9\xc3\x6a\xba\xa4\x4a\xb9\xb2\x7b\xdf\x3c\x28\x36\x35\x53\xb7\x61\xbd\xab\xdf\x90\xf6\x34\x89\x5e\xdd\x37\x8a\xb5\xf9\xc6\x45\xfa\xd6\xf8\xcd\x9a\xc2\x31\x70\x59\x1f\xa7\x6c\x32\xc9\x0f\xfe\x9b\x07\xf1\xa2\x62\xd7\xb6\x69\xbc\x52\x77\x76\xbb\xc3\xf3\xd3\xfe\x78\x6c\x9b\x86\xd4\x9a\xa3\xdb\x3d\x9d\xbe\xbe\xbc\x3c\x3f\xe2\x27\xb7\xeb\xf8\x29\x9c\xf6\x8f\xf8\xe0\x76\xe1\x78\x3a\x1e\x5f\xda\xa6\xf9\x3e\x8a\xb1\xdb\xf1\x81\x8f\xfc\xd7\xed\x03\xb5\xc6\xae\xf9\x8e\xae\xfd\x9f\x79\x48\x17\x2e\xbd\xa6\xef\x6e\x94\x10\x38\xb6\x9e\xba\xf3\xea\x57\x0c\x6b\xdb\xa9\xb8\x0b\x95\x3f\x1f\x7a\xbe\xdc\x54\x96\x5e\x13\x99\x53\xee\xed\xa6\xf2\x89\x3e\xba\xd8\xde\xbf\xd9\xf5\xfd\xa3\xed\xfb\x00\xdd\xff\xe5\x9f\x55\x0f\xa7\xfc\xf6\xe9\xf0\x9c\xdf\xee\x6f\x02\x77\xa9\xd0\x3a\x12\x77\xf6\x6b\x5a\x37\xae\xc2\x96\xdf\xa8\xd9\x68\x7d\xb9\xfd\x1b\x00\x00\xff\xff\xd9\xfb\xca\x9b\x7a\x04\x00\x00")

func distHydrocarbonMinCssBytes() ([]byte, error) {
	return bindataRead(
		_distHydrocarbonMinCss,
		"dist/hydrocarbon.min.css",
	)
}

func distHydrocarbonMinCss() (*asset, error) {
	bytes, err := distHydrocarbonMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/hydrocarbon.min.css", size: 1146, mode: os.FileMode(420), modTime: time.Unix(1481918314, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/hydrocarbon.min.css": distHydrocarbonMinCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"hydrocarbon.min.css": &bintree{distHydrocarbonMinCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

