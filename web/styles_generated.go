// Code generated by go-bindata.
// sources:
// dist/hydrocarbon.min.css
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distHydrocarbonMinCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x93\x51\x72\xdb\x38\x0c\x86\xaf\x92\x99\x4e\xa6\x2f\x50\x46\x76\xdd\x6c\x43\xcd\xec\x09\xf6\xad\x27\x00\x45\x48\xc2\x1a\x22\x19\x12\x72\xec\x6a\x74\xf7\x1d\x51\x4e\xe2\x6c\xda\x27\x51\xa0\xf8\x0b\xf8\xfe\x9f\x08\x68\x6d\x02\x6c\x53\xf0\x97\x11\xd0\xb9\x44\x39\x03\xc6\x28\xa4\x80\x49\xb9\x15\x02\xcc\xec\x08\x70\x72\x1c\xc0\x82\xe5\x1e\xac\x84\xf6\xf8\x3c\x05\x25\xb0\xc1\x5d\xa0\x45\x7f\xc2\x0c\x2d\x46\xe5\xe0\xa1\x25\xaf\x94\xa0\x65\x25\x68\x83\x23\x70\x0e\x1c\x09\x38\x52\x64\xc9\xe0\x3a\x0f\x8e\x4f\xe0\x04\x9c\x02\x8d\x40\xa3\x25\x07\x1d\x93\xb8\x4c\x0a\x1d\xf7\xaf\x52\x1d\xf7\x53\x22\xe8\x42\x58\x15\xbb\x90\x46\x18\x76\x30\xec\x61\xf8\x06\xc3\x01\x86\xef\x30\x3c\xc2\x40\xe8\x28\xc1\xd0\xa7\x30\x45\x18\x74\x14\x60\xe0\x2e\xe1\x48\xc0\x63\x0f\xec\x33\x1c\xad\x03\x41\x4b\x02\x42\x3d\x79\x07\xc2\x30\x62\x3a\xc2\x48\x7e\x02\x8f\x27\x08\xf6\x5f\x6a\x15\x82\x40\x98\x34\x4e\x0a\x11\x62\x22\x78\x86\x34\xd9\x0b\x64\xc8\x38\x46\xc8\xd4\x96\xbe\xf2\x88\x22\x90\x23\x7a\xc8\x9a\xf8\x48\xeb\x23\xf8\x1e\xf2\x64\x21\x4f\xe3\x88\xe9\x02\x79\x8a\xa0\x68\x85\x40\x0b\x26\x75\xa0\xeb\x24\xa0\x03\xe8\xda\x34\x28\x8f\x04\x9a\x40\x15\x26\x98\x04\x4e\x98\xe0\xc4\x8e\xc2\x3c\x62\xea\xd9\x9b\xba\x89\xe8\x1c\xfb\xde\xd4\x8d\x0d\xc9\x51\x32\x75\x73\xa2\xd5\x19\x94\x0a\x85\x7b\x6f\x2c\x66\x12\xf6\xd4\x74\xc1\xab\x61\x3f\x50\x62\x2d\x2f\x55\xe6\x5f\x64\x76\x75\x7d\xbf\x7c\x34\xf3\xd5\x89\x3f\x92\xfe\x88\xf4\x8d\xd1\x75\xfc\xd9\x71\x8e\x82\x17\x53\x82\xb0\xac\xc3\xcd\x6b\x07\xd5\x40\xdc\x0f\x6a\x76\x4b\x10\x98\x64\x16\xce\x5a\x65\xbd\x08\x19\x1f\x3c\x2d\x37\xb9\x79\x9e\xcb\x33\xff\x7f\xc3\x60\xb7\xfe\xff\xa6\x60\xa9\x0b\xab\x0f\xd7\x9d\xe7\x6b\x61\x6e\x83\x57\xf2\x6a\xbe\x7e\x6d\x5e\x97\x45\xab\x10\x9f\x37\x58\x55\x8e\xd8\xde\xd2\xab\xda\x20\x82\x31\x93\x79\x5d\x2c\x0f\x2b\x11\x8b\x69\x7e\x61\xa7\x83\xf9\x56\xdf\x2f\x0f\x57\xc1\x6b\xe9\xaf\xfa\xbe\xd9\xfc\xa8\x84\x3a\x2d\x9f\x08\xbf\x41\xe8\x84\xce\x1b\x03\x8b\xed\x71\x25\xe6\xdd\xfa\x9f\x90\xcc\x97\xae\xeb\x9a\xeb\x72\x77\xd8\xfd\xd8\x7f\xdb\x7c\xe9\x70\x64\xb9\x98\x9f\xe8\x73\xf5\x93\x12\x77\x8d\xd2\x59\xab\x44\xde\x51\x5a\xfb\x0d\x51\x79\xe4\x5f\xf4\x0f\xf5\x6c\x59\x58\x2f\x8b\xe3\xd3\x5b\x5f\xd7\x74\xec\x12\x8d\x77\x38\x69\x68\x5e\x42\x72\xd5\x4b\xc2\x68\x6c\x22\x3c\x56\xeb\x7b\xb3\x75\xff\x54\xdf\xdf\x86\xe1\x31\x9e\x9b\x0f\x5e\x3d\x1c\x8a\xf4\x7a\xb7\xe6\xd2\xc5\x96\xaa\xed\x12\x2f\x3c\x6f\x67\x8b\x89\xac\x28\xdc\x2e\xc3\x6e\x7e\x17\xdc\x1f\xe2\x79\x19\xf6\xb7\x95\x3a\x9e\x97\x22\x17\x43\xe6\x35\x2f\x26\x91\xa0\xf2\x89\x16\xf6\x71\xd2\x3f\xd5\x0d\xfb\x13\x0a\xbb\xab\x79\x66\x17\xcf\x77\x39\x08\xbb\xbb\x2f\x2d\xed\xdd\xa1\x5e\xb6\x74\xbe\x9f\x47\x9b\x83\x4c\x4a\x4d\x2a\xb3\xac\x2e\xab\x86\xd1\xd4\x4d\x31\xea\xfd\xf6\xac\xa4\x9a\x4f\xd3\xdd\x72\xd9\xc7\xf3\xf2\x65\x8b\xfd\x1c\x4e\x94\x3a\x09\x2f\x66\x60\xe7\xc8\x37\xbf\xbb\x8c\x9f\xac\xde\x1f\xbe\x3f\x3d\x3d\x36\xef\x99\xaf\xf4\x12\xaf\xc1\xbf\x0a\xff\x7d\x93\x1a\xf6\xc5\x85\x12\xf4\xa6\x93\x80\x6a\xd6\x9e\x17\xe1\x07\x09\x7d\xd8\x78\xbe\x6c\x1e\xd9\x20\x8e\xd2\x8d\xca\x43\x99\x77\xde\x8e\x95\xf5\xcd\xe6\x1d\x7e\xbc\x9f\xef\x10\x0e\xf1\x7c\x57\x02\x70\x93\xce\xcf\x50\x4a\xc5\x51\x1b\x12\x16\xc8\x65\x82\x55\xd6\x0c\x2b\x98\xdf\xa4\x7c\xd7\x1d\xdc\x8f\xdd\xf2\x5f\x00\x00\x00\xff\xff\x03\xe5\xcc\xaf\x4f\x06\x00\x00")

func distHydrocarbonMinCssBytes() ([]byte, error) {
	return bindataRead(
		_distHydrocarbonMinCss,
		"dist/hydrocarbon.min.css",
	)
}

func distHydrocarbonMinCss() (*asset, error) {
	bytes, err := distHydrocarbonMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/hydrocarbon.min.css", size: 1615, mode: os.FileMode(420), modTime: time.Unix(1485092657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/hydrocarbon.min.css": distHydrocarbonMinCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"hydrocarbon.min.css": &bintree{distHydrocarbonMinCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

