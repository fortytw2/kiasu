// Code generated by go-bindata.
// sources:
// dist/hydrocarbon.min.css
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distHydrocarbonMinCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\xdd\x6e\x9c\x3a\x10\x7e\x95\x95\xa2\xa8\x37\x43\x04\xdb\x6d\x94\x18\xe9\x3c\xc1\xb9\xeb\x13\x8c\xf1\x00\x73\xd6\xd8\x8e\x3d\x90\xdd\x22\xde\xfd\xc8\x40\x92\x4d\x9b\x5e\x61\xc6\x78\xfc\xfd\x0d\x08\xa8\x75\x04\x6c\xa2\x77\xd7\x01\xd0\x98\x48\x29\x01\x86\x60\x49\x00\xa3\x70\x63\x09\x30\xb1\x21\xc0\xd1\xb0\x07\x0d\x9a\x3b\xd0\xd6\x37\xe7\x97\xd1\x0b\x81\xf6\xe6\x0a\x0d\xba\x09\x13\x34\x18\x84\xbd\x83\x86\x9c\x50\x84\x86\x85\xa0\xf1\x86\xc0\x18\x30\x64\xc1\x90\x20\xdb\x04\xa6\x75\x60\x78\x02\x63\xc1\x08\xd0\x00\x34\x68\x32\xd0\x32\x59\x93\x48\xa0\xe5\xee\xad\x55\xcb\xdd\x18\x09\x5a\xef\x73\xc7\xd6\xc7\x01\xfa\x0a\xfa\x23\xf4\xdf\xa1\x3f\x41\xff\x03\xfa\x47\xe8\x09\x0d\x45\xe8\xbb\xe8\xc7\x00\xbd\x0c\x16\x18\xb8\x8d\x38\x10\xf0\xd0\x01\xbb\x04\x67\x6d\xc0\xa2\x26\x0b\x96\x3a\x72\x06\x2c\xc3\x80\xf1\x0c\x03\xb9\x11\x1c\x4e\xe0\xf5\x7f\xd4\x08\x78\x0b\x7e\x94\x30\x0a\x04\x08\x91\xe0\x05\xe2\xa8\xaf\x90\x20\xe1\x10\x20\x51\xb3\xe2\x4a\x03\x5a\x0b\x29\xa0\x83\x24\x91\xcf\x94\x1f\xde\x75\x90\x46\x0d\x69\x1c\x06\x8c\x57\x48\x63\x00\x41\x6d\x09\x64\x95\x49\x0c\x48\x66\x02\xd2\x83\x64\xd0\x20\x3c\x10\x48\x04\x11\x18\x61\xb4\x30\x61\x84\x89\x0d\xf9\x79\xc0\xd8\xb1\x53\x65\x1d\xd0\x18\x76\x9d\x2a\x6b\xed\xa3\xa1\xa8\xca\x7a\xa2\xec\x0c\xda\x02\x2d\x77\x4e\x69\x4c\x64\xd9\x51\xdd\x7a\x27\x8a\x5d\x4f\x91\x65\x7d\x29\x12\xff\x22\x55\x95\xe5\xfd\xf2\xd9\xcc\x37\x27\xfe\xaa\xf4\x67\x49\xdf\x35\xda\xe9\xcf\x86\x53\xb0\x78\x55\x6b\x10\x96\x4c\x6e\xce\x08\x8a\x9e\xb8\xeb\x45\x55\x8b\xb7\x30\xda\xd9\x72\x92\x22\xc9\xd5\x92\x72\xde\xd1\x72\x93\x9b\x97\x79\x7d\xa6\xdf\x37\x14\xb6\xf9\xfe\x9b\x82\xa6\xd6\x67\x1f\xf6\x9d\x97\xbd\x30\x37\xde\x09\x39\x51\xdf\xbe\xd5\x6f\xcb\xb5\xd7\xaa\xf8\xbc\x89\x55\xa4\x80\xcd\xad\x7a\x45\xe3\xad\xc5\x90\x48\xbd\x2d\x96\x87\xac\x88\xc6\x38\xbf\xb2\x91\x5e\x1d\xcb\xfb\xe5\x61\x6f\xb8\x97\x9e\xca\xfb\x7a\xf3\xa3\xb0\xd4\xca\xf6\xc9\x7e\xaa\xc8\x1c\xbf\xd2\x43\x63\x73\xce\xea\x39\x93\xef\xf4\x51\xdd\xb5\x6d\x5b\xef\xcb\xea\x54\x3d\x1d\xbf\x6f\x1e\xb5\x38\xb0\xbd\xaa\x9f\xe8\x52\xf1\x93\x22\xb7\xb5\xd0\x45\x8a\x48\xce\x50\xcc\xd8\x7d\x10\x1e\xf8\x17\xfd\x4b\x1d\x6b\xb6\x2c\xd7\xc5\xf0\xf4\x8e\x71\x4f\x4a\x15\x69\x38\xe0\x28\xbe\x7e\xf5\xd1\x14\xaf\x11\x83\xd2\x91\xf0\x5c\xe4\xf7\x7a\x63\xf2\x5c\xde\xdf\x06\xe3\x31\x5c\xea\x4f\xbe\x3d\x9c\x16\x9e\xb7\x0f\x56\xd7\x58\xd0\x72\xb3\xf4\xd5\xfc\x71\xea\x78\x0a\x97\xa5\x3f\xde\x56\xca\x70\x59\xf2\x6c\xce\xc1\x27\xce\x01\x51\x91\x2c\x0a\x4f\xb4\xb0\x0b\xa3\xfc\xad\xae\xd8\x4d\x68\xd9\xec\x6e\xa9\x2a\x5c\x0e\xc9\x5b\x36\x87\xbb\x86\x8e\xe6\x54\x2e\x5b\x1c\x3f\xce\xa3\x4e\xde\x8e\x42\x75\x5c\x01\x67\x5b\x45\xfc\xa0\xca\x7a\x75\xe6\x63\x5c\xb2\x1c\x9b\x90\xdb\x90\x6c\xff\xa4\x5b\xf2\xc7\x70\x59\xee\xb6\x9c\xcf\x7e\xa2\xd8\x5a\xff\xaa\x7a\x36\x86\x5c\xfd\xd5\xf4\xfd\xe1\xe7\xf1\xf4\xe3\xf9\xf9\xb1\xfe\x08\x79\x21\xd7\xb0\x27\xdd\xf2\x7b\x26\xd8\xad\x12\xaf\xd1\xa8\x5b\xeb\x51\x54\xc6\xfa\x76\xf7\x3f\x96\x1f\x56\x32\xf3\xb6\xb7\xae\x6f\x36\x0f\xf8\x39\x5d\x1f\x0c\x4f\xe1\x72\x58\x2d\xbc\xc9\xd7\x9f\x8c\xd7\x8a\xa1\xc6\x47\x5c\x15\xdc\xe1\x1d\x50\xf5\x99\xf5\x17\x39\xad\xda\x93\x79\xaa\x96\xff\x03\x00\x00\xff\xff\xcd\x7e\xe7\x61\x1d\x06\x00\x00")

func distHydrocarbonMinCssBytes() ([]byte, error) {
	return bindataRead(
		_distHydrocarbonMinCss,
		"dist/hydrocarbon.min.css",
	)
}

func distHydrocarbonMinCss() (*asset, error) {
	bytes, err := distHydrocarbonMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/hydrocarbon.min.css", size: 1565, mode: os.FileMode(420), modTime: time.Unix(1485004900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/hydrocarbon.min.css": distHydrocarbonMinCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"hydrocarbon.min.css": &bintree{distHydrocarbonMinCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

