// Code generated by go-bindata.
// sources:
// dist/hydrocarbon.min.css
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distHydrocarbonMinCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x94\x5d\x8e\xdb\x3a\x0c\x85\xb7\x12\xa0\x28\xfa\xc2\x0c\x92\x34\x33\x68\xe5\x2d\xdc\xb7\xae\x80\xb6\x28\x9b\x37\xd4\xcf\x48\xb4\x9b\xd4\xf0\xde\x2f\xe4\x64\xe6\x26\x6d\xe7\xc9\x0c\x25\x50\x87\xdf\x39\x08\x02\xb6\x6d\x06\xec\x72\x0c\x17\x0f\x68\x6d\xa6\x52\x00\x53\x12\x52\xc0\xac\xdc\x09\x01\x16\xb6\x04\x38\x5a\x8e\xd0\x42\xcb\x3d\xb4\x12\xbb\xd3\xeb\x18\x95\xa0\x8d\xf6\x02\x1d\x86\x09\x0b\x74\x98\x94\x63\x80\x8e\x82\x52\x86\x8e\x95\xa0\x8b\x96\xc0\x5a\xb0\x24\x60\x49\x91\xa5\x80\x75\x01\x2c\x4f\x60\x05\xac\x02\x79\x20\xdf\x92\x05\xc7\x24\xb6\x90\x82\xe3\xfe\x6d\x94\xe3\x7e\xcc\x04\x2e\xc6\x3a\xd1\xc5\xec\x61\xd8\xc3\x70\x80\xe1\x2b\x0c\x47\x18\x9e\x61\x78\x81\x81\xd0\x52\x86\xa1\xcf\x71\x4c\x30\xa8\x17\x60\x60\x97\xd1\x13\xb0\xef\x81\x43\x81\x53\x6b\x41\xb0\x25\x01\xa1\x9e\x82\x05\x61\xf0\x98\x4f\xe0\x29\x8c\x10\x70\x82\xd8\xfe\x4b\x9d\x42\x14\x88\xa3\xa6\x51\x21\x41\xca\x04\xaf\x90\xc7\xf6\x02\x05\x0a\xfa\x04\x85\xba\x55\x57\xf1\x28\x02\x25\x61\x80\xa2\x99\x4f\x54\x3f\x31\xf4\x50\xc6\x16\xca\xe8\x3d\xe6\x0b\x94\x31\x81\x62\x2b\x04\xba\x62\x52\x0b\x5a\x37\x01\x1d\x40\xab\x68\x50\xf6\x04\x9a\x41\x15\x46\x18\x05\x26\xcc\x30\xb1\xa5\x38\x7b\xcc\x3d\x07\xb3\x6b\x12\x5a\xcb\xa1\x37\xbb\xa6\x8d\xd9\x52\x36\xbb\xc6\xc5\xa0\xdb\xc2\xbf\xc8\xec\x77\xbb\xcf\xeb\x4f\xc3\x61\xa0\xcc\xda\x4c\x54\x5d\x43\xd9\xa2\x70\x1f\x4c\x8b\x85\x84\x03\x2d\x8f\x66\xbe\x39\xf1\x21\xe9\x47\xa4\xef\x8c\x6e\xeb\xcf\x96\x4b\x12\xbc\x98\x35\x08\x4b\x5d\x6e\xae\xaf\x6c\x07\xe2\x7e\x50\xb3\x5f\xa2\xc0\x28\xb3\x70\xd1\x6d\xd1\x8b\x90\x09\x31\xd0\x72\x97\x9b\xd7\x79\xfd\x96\xdf\x0f\x0c\xba\xfa\xfe\x5d\xa3\x25\x17\xab\x0f\xb7\x93\xd7\x5b\x63\xee\x62\x50\x0a\x6a\xbe\x7c\x69\xde\xca\x75\xd6\x4a\x7c\xbe\xc2\xda\x76\x51\x04\x53\x21\xf3\x56\xdc\x28\x6e\x4b\xc2\x6e\xc5\x7a\x55\xbf\x22\x75\xe8\x59\x2e\xe6\x07\x86\xb2\xfd\x41\x99\x5d\xa3\x74\xd6\x6d\xa6\x60\x29\xd7\xcb\x31\x29\x7b\xfe\x45\xff\x50\xcf\x2d\x0b\xeb\xa5\x69\xb1\x3b\x55\x48\xc1\xd6\xb7\x62\x36\x9f\x9c\x73\xcd\xad\xdc\x1f\xf7\xdf\x0e\x5f\x17\xcb\xd3\xd3\x4d\xe2\x7c\xe7\xdd\x4b\x3a\x37\x0f\xd4\x9e\x8e\xcd\x4f\xb6\x3a\x98\xe7\xdd\xe7\xe6\x16\x80\x7d\x26\xbf\xc1\x51\xe3\x52\xc3\x3f\xa7\x58\xb8\x3a\x60\x32\x09\x2a\x4f\xb4\x70\x48\xa3\x7e\xd4\x37\x1c\x26\x14\xb6\x37\x1c\x66\x9f\xce\x9b\x12\x85\xed\xe6\x53\x47\x07\x7b\xdc\x2d\x57\xbf\xef\x65\x1d\xd2\xb9\x79\x1f\x87\x6d\x89\x32\x2a\x35\x79\x95\x58\x43\xa8\x1a\xbd\xd9\x35\x42\x4e\xef\xe2\x59\x75\x5e\x71\x5d\x83\x77\xfd\x0f\x58\x1e\x42\xb0\xd5\x4b\xba\x26\xa1\xf9\x4b\xbc\xe3\x44\xd9\x49\xfc\x69\x06\xb6\x96\xc2\x5f\xc8\x1e\x8e\xcf\xdf\xbf\xbf\x2c\xc2\xef\xf9\xe3\xb0\x02\x5c\xd3\xd2\x38\x89\xa8\xa6\xea\x5a\x84\x9f\x56\xc1\xf3\xb5\xb7\xd6\x8b\xf0\x06\x1f\x93\xdb\xdc\x59\xf6\x87\xf6\xff\x57\x3b\xa6\xf3\x66\x75\x6b\xbd\x63\xa9\x8b\x19\x57\x3a\x6b\xde\xea\x58\x33\x54\xf5\xf3\x9f\x92\xf7\xee\x68\xbf\xed\x97\xff\x02\x00\x00\xff\xff\x46\x1b\xc1\x8e\x69\x05\x00\x00")

func distHydrocarbonMinCssBytes() ([]byte, error) {
	return bindataRead(
		_distHydrocarbonMinCss,
		"dist/hydrocarbon.min.css",
	)
}

func distHydrocarbonMinCss() (*asset, error) {
	bytes, err := distHydrocarbonMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/hydrocarbon.min.css", size: 1385, mode: os.FileMode(420), modTime: time.Unix(1481991670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/hydrocarbon.min.css": distHydrocarbonMinCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"hydrocarbon.min.css": &bintree{distHydrocarbonMinCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

