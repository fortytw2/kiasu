// Code generated by go-bindata.
// sources:
// schema/init.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaInitSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x5f\x6f\xea\x36\x18\xc6\xaf\x93\x4f\xf1\xde\x01\x1a\x9d\xce\x8e\xa6\xdd\xf4\x2a\x07\x5c\x2d\x1a\x0d\x5d\xfe\x4c\x74\x37\x91\x1b\xbf\x80\x47\x62\x67\xb6\xd3\xc2\xb7\x9f\x62\x62\x4a\x80\x6a\xa3\xda\xa9\x7a\x43\xc0\x7a\xfc\xef\xf7\x3c\x79\x5f\x26\x31\x09\x52\x02\x64\x91\x92\x28\x09\xe7\x11\x84\x77\x10\xcd\x53\x20\x8b\x30\x49\x13\xa8\x57\x85\xda\xd5\x46\xde\xfa\xff\x22\x2c\xb8\xc1\xad\xb9\xf5\x9d\x2e\x0d\xbe\xcd\x08\x34\x1a\x95\x86\xa1\xef\x71\x06\x59\x16\x4e\xe1\x21\x0e\xef\x83\xf8\x11\x7e\x23\x8f\x30\x25\x77\x41\x36\x4b\x61\x85\x22\x57\x54\x30\x59\xe5\x4d\xc3\xd9\x70\x34\xf6\x7d\xaf\x50\x48\x0d\xb2\x9c\x1a\x48\xc3\x7b\x92\xa4\xc1\xfd\x43\xfa\xa7\xdd\x31\xca\x66\xb3\xc3\x64\x21\x5f\xda\x09\x5e\x53\xb3\x6b\xf4\xbe\xa7\x8d\xe2\x35\xe6\x45\xa3\x8d\xac\x50\xe5\x9c\x41\x4a\x16\xe9\xd8\xf7\xb0\xa2\xbc\x84\x49\xd8\xfe\x3c\x2c\xd0\x4e\x99\xcc\xa3\x24\x8d\x83\x30\x4a\xc1\x6a\xf2\x46\xf0\xbf\x21\x8b\xc2\xdf\x33\x02\x43\x3b\x34\xf2\x47\xb7\xbe\x7f\x73\x03\xa5\x5c\x71\x01\x46\x6e\x50\x68\xa0\x0a\x41\x0a\xbc\x31\xbc\x42\x37\xd6\x68\x64\x60\x64\x27\xe4\x4b\x90\xb4\x31\x6b\xf8\xfa\xe3\x17\xe0\x1a\x84\x34\x56\xd1\xc7\x69\xb5\x79\xb7\xc0\xf5\x54\xbd\xd6\x8e\xdc\x4d\x8a\xc9\x1d\x89\x49\x34\x21\x49\x67\xd3\xf1\x55\xaf\xc5\x8f\xdb\x9a\x2b\xd4\xff\x4d\x0f\x3f\x40\x18\xa5\x24\xfe\x23\x98\xc1\xe0\xeb\xcf\xf0\xeb\x3c\x8b\x93\x41\xbb\xad\x3d\x20\x5d\xa1\x30\x70\x42\xdf\xe3\x35\x4c\xc2\x69\xdc\x3b\xa5\x25\xb1\x57\xba\x0d\x50\x14\x92\xe1\xf0\xe8\xf6\x4f\x3b\x83\x7a\xf8\xd3\x2f\xa3\x31\x0c\xd6\xb8\x1d\x74\x20\x18\x7c\x9b\xcf\x67\x24\x88\xce\x0f\xb9\xa4\xa5\x46\x6b\x64\x47\xbf\xb3\x38\x8c\xa6\x64\xd1\x33\x61\xff\xc8\x39\xdb\xc2\x3c\x3a\xb1\xc7\x3e\xbb\x34\x68\xd4\x9a\xcb\x5e\x1e\x9c\xff\xad\xeb\x28\x0c\x2f\xa8\x41\xa7\xd3\x7d\xdb\xdd\xe8\xe7\xb2\xfc\x4a\xaf\x36\xb8\x7b\x8f\x53\xb4\x30\xfc\x19\xdf\xf6\xca\xa8\xe6\x6d\xab\x1c\xb8\x7c\x83\x3b\x67\xd2\x2b\xcc\x0d\xee\x3a\x7b\x6a\xba\xab\x50\x98\xbd\x31\x2f\x6b\x6c\x3f\x11\x14\x16\x52\x31\xa0\x65\xf9\x2a\xa8\x28\x43\x78\xe6\x14\xf6\xe5\xa3\xef\xd3\x41\xf5\xb9\x7c\xba\xa6\x32\xba\xf2\xb5\x94\x25\x6b\x37\x3e\x4e\x6a\x45\xb9\x30\x94\x0b\x28\x64\x59\x62\x61\x2c\x45\xb9\x84\x25\x22\x3b\x49\xac\x9b\xfe\x3f\x82\xc8\x12\x12\x27\xc7\x21\xfb\x80\x1e\x21\x68\x85\xfd\x70\x1f\x34\x03\x86\x4b\xda\x94\x66\x70\x20\xd6\x52\xb0\xbc\xb8\x60\xfc\x99\xb3\x86\x96\x17\xd1\x58\xdd\xa7\x6c\x89\x75\xd9\xb4\xbd\xe8\xf4\x6d\x6e\x54\x79\x36\x66\xb8\x29\xf1\x74\xd4\xf7\x5c\x2f\xdc\xaf\x34\x86\x46\xbd\x76\xc4\xf6\xe2\xb9\x0b\x06\xd7\x40\xe1\x2f\xd9\xb6\x48\xfa\x54\x22\x3c\xa1\x79\x41\x14\x8e\xa2\x60\x2e\x42\xe7\xf0\xf2\xa3\x70\xed\xbf\x5e\x8a\x8b\x13\x1d\x9d\xd9\x4e\xbe\x24\xb5\x7b\x7e\xd8\x2b\x66\x49\x2b\x2e\x15\x37\xbb\xb6\x0f\x9e\xcb\xbe\xbc\x59\xd0\xec\x15\xf6\x70\xf3\x46\x95\xae\xa6\xd9\x1b\xf4\xa0\x9f\xfe\x11\xab\xa5\x7e\x5f\x5d\x5a\x53\xbd\x3e\xf7\xf9\xbb\x03\xba\x98\x2f\xaf\x90\xc2\x9c\xf5\x9b\x16\xd6\x3f\x01\x00\x00\xff\xff\x58\x47\xd7\xc7\xc6\x0a\x00\x00")

func schemaInitSQLBytes() ([]byte, error) {
	return bindataRead(
		_schemaInitSQL,
		"schema/init.sql",
	)
}

func schemaInitSQL() (*asset, error) {
	bytes, err := schemaInitSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/init.sql", size: 2758, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/init.sql": schemaInitSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"init.sql": {schemaInitSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
