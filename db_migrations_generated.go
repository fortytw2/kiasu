// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\xcf\x6e\xe3\x36\x10\xc6\xcf\xd2\x53\xcc\xcd\x0e\xea\x14\xdb\x45\xd1\x4b\x4e\x8a\xc3\xa0\x6a\x1d\x69\xab\x3f\x45\xb6\x17\x81\x11\xc7\x31\x1b\x8a\x54\x49\x2a\xb1\xde\xbe\x10\x2d\x26\x96\x9d\xa0\xf5\xa2\x0d\x72\xb1\x6c\xe2\x1b\x72\xf8\xfb\x46\x33\x5e\x66\x24\x2a\x08\x90\xdb\x82\x24\x79\x9c\x26\x10\x5f\x43\x92\x16\x40\x6e\xe3\xbc\xc8\xa1\xbd\xaf\x75\xdf\x5a\x75\x11\xfe\x83\xb0\xe6\x16\xb7\xf6\x22\xf4\xba\x22\xba\x5c\x11\xe8\x0c\x6a\x03\xf3\x30\xe0\x0c\xca\x32\xbe\x82\x2f\x59\x7c\x13\x65\x5f\xe1\x57\xf2\x15\xae\xc8\x75\x54\xae\x0a\xb8\x47\x59\x69\x2a\x99\x6a\xaa\xae\xe3\x6c\x7e\xb6\x08\xc3\xa0\xd6\x48\x2d\xb2\x8a\x5a\x28\xe2\x1b\x92\x17\xd1\xcd\x97\xe2\x0f\x77\x62\x52\xae\x56\xcf\xc1\x52\x3d\x0d\x01\x41\xd7\xb2\x53\xf4\x61\x60\xac\xe6\x2d\x56\x75\x67\xac\x6a\x50\x57\x9c\x41\x41\x6e\x8b\x45\x18\x60\x43\xb9\x80\x65\x3c\xfc\x7c\xde\x60\x08\x59\xa6\x49\x5e\x64\x51\x9c\x14\xe0\x34\x55\x27\xf9\x5f\x50\x26\xf1\x6f\x25\x81\xb9\x5b\x3a\x0b\xcf\x2e\xc2\xf0\xfc\x1c\x84\xba\xe7\x12\xac\x7a\x40\x69\x80\x6a\x04\x25\xf1\xdc\xf2\x06\xfd\x5a\x67\x90\x81\x55\xa3\x90\xaf\x41\xd1\xce\x6e\xe0\xf3\xf7\x9f\x80\x1b\x90\xca\x3a\xc5\x14\xa7\xd3\x56\xe3\x06\xa7\x53\x0d\x06\x3b\x2a\x1f\x94\x91\x6b\x92\x91\x64\x49\xf2\xd1\xa6\xfd\xab\x9e\x8a\x1f\xb7\x2d\xd7\x68\xfe\x9d\x1e\xbe\x83\x38\x29\x48\xf6\x7b\xb4\x82\xd9\xe7\x1f\xe1\xe7\xb4\xcc\xf2\xd9\x70\xac\x4b\x90\xde\xa3\xb4\x70\x40\x3f\xe0\x2d\x2c\xe3\xab\x6c\x92\xa5\x23\xb1\x53\xfa\x03\x50\xd6\x8a\xe1\x7c\xef\xf6\x77\xbd\x45\x33\xff\xe1\xa7\xb3\x05\xcc\x36\xb8\x9d\x8d\x20\x18\x5c\xa6\xe9\x8a\x44\xc9\x71\x92\x6b\x2a\x0c\x3a\x23\x47\xfa\xa3\xc5\x71\x72\x45\x6e\x27\x26\xec\x1e\x15\x67\x5b\x48\x93\x03\x7b\xdc\x73\xac\x06\x83\xc6\x70\x35\xa9\x07\xef\xff\xe0\x3a\x4a\xcb\x6b\x6a\xd1\xeb\xcc\xd4\x76\xbf\xfa\xb1\x2c\x3f\xd1\xab\x07\xec\xbf\xc5\x29\x5a\x5b\xfe\x88\x6f\x7b\x65\x75\xf7\xb6\x55\x1e\x5c\xf5\x80\xbd\x37\xe9\x05\xe6\x03\xf6\xa3\x3d\x2d\xed\x1b\x94\x76\x67\xcc\xd3\x06\x87\x4f\x04\x8d\xb5\xd2\x0c\xa8\x10\x2f\x82\x86\x32\x84\x47\x4e\x61\xd7\x3e\xa6\x3e\x3d\xab\x3e\x96\x4f\xa7\x74\x46\xdf\xbe\xd6\x4a\xb0\xe1\xe0\xfd\x4a\x6d\x28\x97\x96\x72\x09\xb5\x12\x02\x6b\xeb\x28\xaa\x35\xac\x11\xd9\x41\xc5\xfa\xf0\xff\x10\x44\x99\x93\x2c\xdf\x2f\xb2\x77\x98\x11\x92\x36\x38\x2d\xee\x67\xcd\x8c\xe1\x9a\x76\xc2\xba\xb6\xe5\x47\xc0\x98\xfb\x02\x86\xc0\x17\x96\x03\x1f\x47\x92\x4b\xc6\x1f\x39\xeb\xa8\x78\x15\x9a\xd3\x7d\xc8\x61\xd9\x8a\x6e\x98\x52\x87\xef\x79\xa7\xc5\xd1\x9a\xe5\x56\xe0\xe1\xea\x0b\xa2\xdd\x4e\x0b\xe8\xb4\x98\x00\xaa\x7c\xc9\x70\x03\x14\xfe\x54\xc3\xf0\xa4\x77\x02\xe1\x0e\xed\x13\xa2\xf4\x14\x25\xf3\xc5\x75\x0c\xaf\xda\x2b\xbb\xdd\xd7\xd7\x0a\xc9\x8b\xf6\x72\x76\xc1\xaf\x49\xdd\x99\xef\xf6\xf2\x39\xd2\x9a\x2b\xcd\x6d\x3f\x4c\xc8\x63\xd9\xa7\x37\x5b\x9d\xbb\xc2\x0e\x6e\xd5\x69\xe1\xbb\x9d\xbb\xc1\x04\xfa\xe1\x5f\xb4\x56\x99\x6f\xeb\x58\xb5\x92\x16\xa5\xad\x36\xd4\x6c\x8e\xfd\xfe\xdf\x41\xbd\x5a\x67\xc1\x9d\x62\xfd\x71\x32\xb8\xb5\x9a\xc2\x2f\x79\x9a\x5c\x0e\x00\xff\x0e\x00\x00\xff\xff\x30\xdf\xcd\x47\xf4\x0a\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 2804, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
