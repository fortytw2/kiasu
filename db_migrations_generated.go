// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x6e\xb6\x51\xa7\xd8\x2e\x8a\x5e\x72\x72\x12\x06\xab\xd6\x91\xb7\xb2\xdc\x66\x7b\x11\x68\x71\x6c\xb3\xa6\x49\x2d\x3f\x76\xe3\x7f\x5f\x90\x96\x14\x59\x76\xba\x49\xd0\x06\xed\xc9\x30\xf5\x86\x1c\xbe\xf7\x66\x86\xd7\x19\x99\xe4\x04\xc8\x7d\x4e\xd2\x79\x32\x4b\x21\xb9\x85\x74\x96\x03\xb9\x4f\xe6\xf9\x1c\xaa\x75\xa9\xf7\x95\x55\x97\xf1\x37\x80\x25\xb7\xf8\x60\x2f\xe3\x06\x97\x4f\xae\xa6\x04\x9c\x41\x6d\x60\x18\x47\x9c\xc1\x62\x91\xdc\xc0\xc7\x2c\xb9\x9b\x64\x9f\xe0\x17\xf2\x09\x6e\xc8\xed\x64\x31\xcd\x61\x8d\xb2\xd0\x54\x32\xb5\x2b\x9c\xe3\x6c\x38\x1a\xc7\x71\x54\x6a\xa4\x16\x59\x41\x2d\xe4\xc9\x1d\x99\xe7\x93\xbb\x8f\xf9\x1f\xe1\xc4\x74\x31\x9d\xb6\xc1\x52\x7d\xf5\x01\x91\xab\xd8\x4b\xf0\x71\x44\xd9\x8e\x4b\xb8\x9a\xcd\xa6\x64\x92\x9e\xe2\x56\x54\x18\xf4\x38\x63\x35\xaf\xb0\x28\x9d\xb1\x6a\x87\xba\xe0\x0c\xae\x93\x9c\xdc\xe7\xe3\xf6\x9b\x71\x4b\x53\x6a\x5e\x59\xae\xe4\xd1\x77\x41\x8d\x2d\x2a\xba\xdf\xa1\xb4\x85\xcf\xaf\x9b\xdb\x38\x8e\x70\x47\xb9\xa8\xe1\x6d\x0a\xfe\xd0\x45\x9a\xfc\xba\x20\x30\x0c\x80\x51\x3c\xba\x8c\xe3\x8b\x0b\x10\x6a\xcd\x25\x58\xb5\x45\x69\x80\x6a\x04\x25\xf1\xc2\xf2\x1d\x36\x6b\xce\x20\x03\xab\x6a\x20\x5f\x81\xa2\xce\x6e\xe0\xfd\xf7\xef\x80\x1b\x90\xca\x06\xc4\xb1\x44\x01\x5b\xd4\x1b\xbc\x5c\xa9\xc8\x4b\x5c\x34\x41\x19\xb9\x25\x19\x49\xaf\xc9\xbc\x96\xbe\x7b\xa9\x7f\x59\xd2\x08\x1f\x2a\xae\xd1\x3c\x0f\x0f\xdf\x41\x92\xe6\x24\xfb\x6d\x32\x85\xc1\xfb\x1f\xe1\xc3\x6c\x91\xcd\x07\x3e\xcd\x70\x21\xba\x46\x69\xa1\xa7\x4b\xc4\x2b\xb8\x4e\x6e\xb2\xa3\x5b\x05\xe6\x0e\xc8\xe6\x00\x94\xa5\x62\x38\xec\xb0\xb5\xdc\x5b\x34\xc3\x1f\x7e\x1a\x8d\x61\xb0\xc1\x87\x41\x4d\x1c\xfb\x86\xff\x82\xf0\xb5\x5a\xb5\x25\x92\xf4\x86\xdc\x1f\x89\x76\xf8\x29\x38\x7b\x80\x59\xda\x93\x33\xfc\xd6\xee\x31\x68\x0c\x57\x47\xfe\x69\xfc\xe2\x5d\x82\xd2\xf2\xd2\x5b\xb4\xc6\x99\x63\x9b\x34\xab\xff\x6f\x8b\xbc\x50\xdb\x2d\xee\x9b\xea\x7c\x99\xb6\xb4\xb4\xfc\x0b\x3e\xad\xae\xd5\xee\x69\x71\x1b\xaa\x8b\x2d\xee\x1b\x59\x1f\xe9\xdf\xe2\xbe\x16\x74\xa5\x04\xf3\x04\x76\x95\xdc\x51\x2e\x2d\xe5\x12\x4a\x25\x04\x96\x36\xc4\xa8\x15\xac\x10\x59\x4f\xd1\x26\xfc\x1f\x14\x74\x31\x27\xd9\xbc\x4b\xea\x1b\xf4\x71\x49\x77\x78\x2c\x66\x8b\x19\x30\x5c\x51\x27\xec\xa0\xdb\x52\xeb\xdc\xc7\xe0\x03\xdb\xd6\x1a\xf8\x09\x4c\x72\xc9\xf8\x17\xce\x1c\x15\x67\x49\x0b\xb8\xff\xe0\x40\x3b\xcc\x1a\x94\x9f\x1d\xba\x93\x28\x7f\x7e\x25\x9c\x1f\x0a\x7d\xdb\x3b\x2d\x4e\xd6\x2c\xb7\x02\xfb\xab\x71\x54\xb9\xa5\xe0\xe5\x2b\x4d\x1d\x88\x2b\x0e\x49\x14\x4e\x8b\xe2\xb0\x5b\xe1\x24\xff\xdc\x98\xbc\x26\xf7\x00\x1a\x83\xd3\x62\x04\xbf\x7f\x20\x19\x81\x03\xf8\x71\xeb\xee\x9e\xfd\x8b\xf7\x76\xeb\x7f\xee\x08\x5e\x34\x25\xc0\x0d\x50\xf8\x53\xf9\xe1\x4a\x97\x02\x61\x89\xf6\x2b\xa2\x6c\x5c\x21\x59\x53\x2c\xa7\x66\x28\x3a\x65\xf4\xdc\x3e\x17\x1d\x62\xce\x41\x9b\xdd\xba\x60\x7f\xca\x39\x68\x48\xee\x0d\xbb\x67\x1c\x55\x9a\x2b\xcd\xed\xde\x8f\xce\x53\xd8\x3b\x0f\xb9\xb8\x00\xc6\x4d\x25\xe8\x1e\xec\x86\x9b\x90\x25\xd4\xfd\x88\x56\xbe\x4b\x29\x0d\x2b\x27\x04\xec\x14\xc3\x38\xaa\xc1\x85\xff\xf7\x54\x19\x7b\x78\xa8\xe1\x6e\xb1\x3d\x16\x72\xcb\xe6\x18\x6a\xae\x46\x5d\x1b\x1e\xb4\xaa\x94\xb1\xaf\xea\x75\x7f\x4b\xff\x9b\xb0\x5e\x2a\x69\xfd\x03\x72\x43\xcd\xe6\xf4\xb1\x78\xbe\x5a\x23\x3f\xd2\x95\x7e\x8a\xd1\xc1\x38\x8e\x96\x8a\xed\x9f\xd3\x0e\xfc\xc3\xca\x6a\x0a\x3f\xcf\x67\xe9\x55\xb7\x93\x76\xf3\x6a\x1b\xa9\x46\xca\xc0\x58\x6a\x9d\x41\x03\x56\xd3\x72\xcb\xe5\xfa\x58\x0b\x8f\x29\x5a\xcc\x30\x8e\xbc\x38\x2d\xc7\x6d\xb6\x1d\xb2\x83\x7a\xfd\xc1\x73\x0e\x18\x4a\xed\x15\xaa\xf4\xbc\x55\x27\x34\x86\xfa\xc0\x70\xbd\xbf\x02\x00\x00\xff\xff\xc5\x40\x26\x68\x2b\x0d\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 3371, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
