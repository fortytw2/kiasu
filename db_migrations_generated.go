// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x6e\xb6\x51\xbb\xd8\x2e\x8a\x5e\x72\x72\x12\x06\xab\xd6\x91\xb7\xb2\xdc\x66\x7b\x21\x68\x71\x1c\xb3\xa1\x48\x2d\x3f\x76\xa3\x7f\x5f\x50\x1f\x8e\x6c\x27\xdd\x24\x68\x83\xf6\x64\x98\x7a\x43\x0e\xdf\x7b\x33\xc3\x8b\x8c\xcc\x73\x02\xe4\x26\x27\xe9\x2a\x59\xa6\x90\x5c\x41\xba\xcc\x81\xdc\x24\xab\x7c\x05\xd5\x6d\x61\xea\xca\xe9\xb3\xf8\x1b\xc0\x42\x38\xbc\x77\x67\x71\x8f\xcb\xe7\xe7\x0b\x02\xde\xa2\xb1\x30\x8e\x23\xc1\x61\xbd\x4e\x2e\xe1\x63\x96\x5c\xcf\xb3\x4f\xf0\x0b\xf9\x04\x97\xe4\x6a\xbe\x5e\xe4\x70\x8b\x8a\x1a\xa6\xb8\x2e\xa9\xf7\x82\x8f\x27\xd3\x38\x8e\x0a\x83\xcc\x21\xa7\xcc\x41\x9e\x5c\x93\x55\x3e\xbf\xfe\x98\xff\xd1\x9c\x98\xae\x17\x8b\x7d\xb0\xd2\x5f\x43\x40\xe4\x2b\xfe\x12\x7c\x1c\x31\x5e\x0a\x05\xe7\xcb\xe5\x82\xcc\xd3\x53\xdc\x96\x49\x8b\x01\x67\x9d\x11\x15\xd2\xc2\x5b\xa7\x4b\x34\x54\x70\xb8\x48\x72\x72\x93\x4f\xf7\xdf\xac\xdf\xd8\xc2\x88\xca\x09\xad\x0e\xbe\x4b\x66\x1d\xad\x58\x5d\xa2\x72\x34\xe4\x37\xcc\x6d\x1a\x47\x58\x32\x21\x3b\xf8\x3e\x85\x70\xe8\x3a\x4d\x7e\x5d\x13\x18\x37\x80\x49\x3c\x39\x8b\xe3\xd9\x0c\xa4\xbe\x15\x0a\x9c\xbe\x43\x65\x81\x19\x04\xad\x70\xe6\x44\x89\xfd\x9a\xb7\xc8\xc1\xe9\x0e\x28\xb6\xa0\x99\x77\x3b\x78\xff\xfd\x3b\x10\x16\x94\x76\x0d\xe2\x50\xa2\x06\x4b\xbb\x0d\x5e\xae\x54\x14\x24\xa6\x7d\x50\x46\xae\x48\x46\xd2\x0b\xb2\xea\xa4\x1f\x5e\xea\x5f\x96\x34\xc2\xfb\x4a\x18\xb4\xcf\xc3\xc3\x77\x90\xa4\x39\xc9\x7e\x9b\x2f\x60\xf4\xfe\x47\xf8\xb0\x5c\x67\xab\x51\x48\xb3\xb9\x10\xbb\x45\xe5\xe0\x48\x97\x48\x54\x70\x91\x5c\x66\x07\xb7\x6a\x98\x6b\x91\xfd\x01\xa8\x0a\xcd\x71\x3c\x60\x6b\x53\x3b\xb4\xe3\x1f\x7e\x9a\x4c\x61\xb4\xc3\xfb\x51\x47\x1c\xff\x86\xff\x1a\xe1\x3b\xb5\x3a\x4b\x24\xe9\x25\xb9\x39\x10\xad\xfd\xa1\x82\xdf\xc3\x32\x3d\x92\xb3\xf9\xed\xdc\x63\xd1\x5a\xa1\x0f\xfc\xd3\xfb\x25\xb8\x04\x95\x13\x45\xb0\x68\x87\xb3\x87\x36\xe9\x57\xff\xdf\x16\x79\xa1\xb6\x77\x58\xf7\xd5\xf9\x32\x6d\x59\xe1\xc4\x17\x7c\x5a\x5d\x67\xfc\xd3\xe2\xf6\x54\xd3\x3b\xac\x7b\x59\x1f\xe8\xbf\xc3\xba\x13\x74\xab\x25\x0f\x04\x0e\x95\x2c\x99\x50\x8e\x09\x05\x85\x96\x12\x0b\xd7\xc4\xe8\x2d\x6c\x11\xf9\x91\xa2\x7d\xf8\x3f\x28\xe8\x7a\x45\xb2\xd5\x90\xd4\x37\xe8\xe3\x8a\x95\x78\x28\xe6\x1e\x33\xe2\xb8\x65\x5e\xba\xd1\xb0\xa5\x76\xb9\x4f\x21\x04\xee\x5b\x6b\xc3\x4f\xc3\xa4\x50\x5c\x7c\x11\xdc\x33\xf9\x28\x69\x0d\xee\x3f\x38\xd0\xda\x59\x83\xea\xb3\x47\x7f\x12\x15\xce\xaf\xa4\x0f\x43\xe1\xd8\xf6\xde\xc8\x93\x35\x27\x9c\xc4\xe3\xd5\x38\xaa\xfc\x46\x8a\xe2\x95\xa6\x6e\x88\xa3\x6d\x12\xd4\x1b\x49\xdb\xdd\xa8\x57\xe2\x73\x6f\xf2\x8e\xdc\x16\x34\x05\x6f\xe4\x04\x7e\xff\x40\x32\x02\x2d\xf8\x61\xeb\xe1\x9e\xc7\x17\x3f\xda\xed\xf8\xf3\x40\x70\xda\x97\x80\xb0\xc0\xe0\x4f\x1d\x86\x2b\xdb\x48\x84\x0d\xba\xaf\x88\xaa\x77\x85\xe2\x7d\xb1\x9c\x9a\x81\x0e\xca\xe8\xb9\x7d\x2e\x6a\x63\x1e\x83\xf6\xbb\x0d\xc1\xe1\x94\xc7\xa0\x4d\x72\x6f\xd8\x3d\xe3\xa8\x32\x42\x1b\xe1\xea\x30\x3a\x4f\x61\xef\x02\x64\x36\x03\x2e\x6c\x25\x59\x0d\x6e\x27\x6c\x93\x25\x74\xfd\x88\x55\xa1\x4b\x69\x03\x5b\x2f\x25\x94\x9a\x63\x1c\x75\x60\x1a\xfe\x3d\x55\xc6\x01\xde\xd4\xf0\xb0\xd8\x1e\x0a\x79\xcf\xe6\x14\x3a\xae\x26\x43\x1b\xb6\x5a\x55\xda\xba\x57\xf5\xba\xbf\xa5\xff\x4d\x58\x2f\xb4\x72\xe1\x01\xb9\x63\x76\x77\xfa\x58\x7c\xbc\x5a\xa3\x30\xd2\xb5\x79\x8a\xd1\xd1\x34\x8e\x36\x9a\xd7\xcf\x69\x07\xe1\x61\xe5\x0c\x83\x9f\x57\xcb\xf4\x7c\xd8\x49\x87\x79\x35\x8c\xff\x15\x00\x00\xff\xff\xdd\x0e\xdd\x67\x4c\x0c\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 3148, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
