// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x4f\x73\xda\x3a\x14\xc5\xd7\xf6\xa7\xb8\x3b\x60\x1e\x79\x93\x97\x79\xf3\x36\x59\x11\x50\xe6\xb9\x25\x26\xf5\x9f\x0e\xe9\xc6\x23\xac\x0b\xa8\x18\xc9\xb5\xe4\x04\xbe\x7d\x47\xc6\x22\x06\x93\x36\xb4\x9d\x4c\x56\x9e\x11\xe7\x5a\x57\xbf\x73\x7c\xc5\x30\x20\x83\x88\x00\x99\x46\xc4\x0f\xbd\x89\x0f\xde\x2d\xf8\x93\x08\xc8\xd4\x0b\xa3\x10\xf2\x45\x5a\x6c\x73\x2d\xaf\xdd\x9f\x08\x53\xae\x71\xa3\xaf\x5d\xab\x8b\x06\x37\x63\x02\xa5\xc2\x42\x41\xd7\x75\x38\x83\x38\xf6\x46\x70\x1f\x78\x77\x83\xe0\x01\x3e\x92\x07\x18\x91\xdb\x41\x3c\x8e\x60\x81\x22\x29\xa8\x60\x72\x9d\x94\x25\x67\xdd\x5e\xdf\x75\x9d\xb4\x40\xaa\x91\x25\x54\x43\xe4\xdd\x91\x30\x1a\xdc\xdd\x47\x5f\xaa\x1d\xfd\x78\x3c\xde\x17\x0b\xf9\x64\x0a\x9c\x32\x67\xe7\xe8\x5d\x07\xd7\x94\x67\x30\xf4\x22\x32\x8d\xf6\x32\xf3\x43\xec\x7b\x9f\x62\x02\xdd\x4a\xd0\x73\x7b\xd7\xae\x7b\x71\x01\x99\x5c\x70\x01\x5a\xae\x50\x28\xa0\x05\x82\x14\x78\xa1\xf9\x1a\xed\x5a\xa9\x90\x81\x96\xb5\x90\xcf\x41\xd2\x52\x2f\xe1\xea\xef\x4b\xe0\x0a\x84\xd4\x95\xe2\x10\x4f\xa5\x4d\xea\x17\x9c\x4f\xc9\x31\x78\x13\x5b\x14\x90\x5b\x12\x10\x7f\x48\xc2\x1a\x7b\xf3\x50\xe7\xe2\xc4\x4d\xce\x0b\x54\xaf\xd3\xc3\x5f\xe0\xf9\x11\x09\x3e\x0f\xc6\xd0\xb9\xfa\x17\xfe\x9f\xc4\x41\xd8\x31\xdb\x56\x0d\xd2\x05\x0a\x0d\x47\x9c\x1d\x9e\xc3\xd0\x1b\x05\x07\x5d\x56\x24\x76\x4a\xbb\x01\x8a\x54\x32\xec\x36\x4e\x3f\xdb\x6a\x54\xdd\x7f\xfe\xeb\xf5\xa1\xb3\xc4\x4d\xa7\x06\xc1\xe0\x66\x32\x19\x93\x81\xdf\x6e\x72\x4e\x33\x85\x95\x91\x35\xfd\xda\x62\xcf\x1f\x91\xe9\x81\x09\xbb\x47\xc2\xd9\x06\x26\xfe\x91\x3d\xd5\xb3\x4e\x83\x42\xa5\xb8\x3c\xc8\x83\xf5\xdf\xb8\x8e\x42\xf3\x94\x6a\xb4\x3a\x75\x68\xbb\x5d\x7d\x5f\x96\x9f\xe9\xd5\x0a\xb7\xf6\xeb\x39\xcf\x2b\x9a\x6a\xfe\x88\x2f\xbb\xa5\x8b\xf2\x65\xb3\x2c\xba\x64\x85\x5b\x6b\xd3\x33\xce\x15\x6e\x6b\x83\xe6\x32\x63\x06\x48\xd3\x99\x35\xe5\x42\x53\x2e\x20\x95\x59\x86\xa9\xae\x6a\xe4\x1c\xe6\x88\xec\xc8\x21\x5b\xfe\x07\x0d\x8a\x43\x12\x84\x4d\xa8\x6f\x30\xe3\x04\x5d\xe3\xa1\x99\x7b\x4d\x87\xe1\x9c\x96\x99\xee\x34\x47\x5e\xdd\x7b\x1f\x4c\xe1\x7e\xf4\x55\x7c\x2a\x92\x5c\x30\xfe\xc8\x59\x49\xb3\x93\xd0\x2a\xdd\x3b\x1c\xf6\x4e\x46\x95\x4e\x50\x7c\x2b\xb1\x6c\x55\x99\xfd\xf3\xac\x34\x43\xfb\x38\xf6\x65\x91\xb5\xd6\x34\xd7\x19\x1e\xaf\x3e\x13\xdc\xbd\xa9\x0f\x65\x91\x1d\xf0\x4b\x6c\xa2\xb8\x02\x0a\x5f\xa5\xb9\x4b\xe8\x2c\x43\x98\xa1\x7e\x42\x14\x16\xb2\x60\x36\x7b\x6d\xb6\x49\x23\x95\xaf\x1d\x03\xce\xae\xe6\x94\xd4\xbe\xad\x29\x36\xbb\x9c\x92\x56\xcd\xfd\xd6\x70\x39\x37\xba\x79\xc1\x65\xc1\xf5\xd6\xdc\x2c\x6d\xd9\xa5\x91\x34\xe3\xf5\x1c\xdd\xfd\x81\xfb\x50\x1f\xa7\xd7\x9c\x26\x3b\x9c\xb9\x54\xfa\x97\xbe\xee\x1f\x12\x7a\x13\x30\xa9\x14\x1a\x85\x4e\x96\x54\x2d\xdb\x7f\x5f\x4e\xe7\xd3\x31\x97\x92\x2c\x5e\x1a\x05\x9d\xbe\xeb\xcc\x24\xdb\xb6\x63\x8d\x1b\x5d\x50\xf8\x10\x4e\xfc\x1b\x03\xf1\x7b\x00\x00\x00\xff\xff\x77\x32\xf9\x6d\x2d\x0a\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 2605, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
