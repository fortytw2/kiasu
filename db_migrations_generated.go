// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x6e\xb6\x51\xa7\xd8\x2e\x8a\x5e\x72\x72\x12\x06\xab\xd6\x91\xb7\x92\xdc\x66\x7b\x21\x68\x71\x9c\xb0\xa1\x49\x2d\x3f\x76\xa3\x7f\x5f\x50\x1f\x8e\x2c\x27\xdd\x24\x68\x83\xf6\x24\x80\x7a\x43\x0e\xdf\x7b\x33\xc3\xf3\x8c\x2c\x0a\x02\xe4\xba\x20\x69\x9e\xac\x52\x48\x2e\x21\x5d\x15\x40\xae\x93\xbc\xc8\xa1\xba\x29\x4d\x5d\x39\x7d\x1a\x7f\x03\x58\x0a\x87\xf7\xee\x34\xee\x71\xc5\xe2\x6c\x49\xc0\x5b\x34\x16\xa6\x71\x24\x38\xac\xd7\xc9\x05\x7c\xcc\x92\xab\x45\xf6\x09\x7e\x21\x9f\xe0\x82\x5c\x2e\xd6\xcb\x02\x6e\x50\x51\xc3\x14\xd7\x3b\xea\xbd\xe0\xd3\xd9\x3c\x8e\xa3\xd2\x20\x73\xc8\x29\x73\x50\x24\x57\x24\x2f\x16\x57\x1f\x8b\x3f\x9a\x13\xd3\xf5\x72\xb9\x0f\x56\xfa\x6b\x08\x88\x7c\xc5\x5f\x82\x8f\x23\xc6\x77\x42\xc1\xd9\x6a\xb5\x24\x8b\xf4\x18\xb7\x65\xd2\x62\xc0\x59\x67\x44\x85\xb4\xf4\xd6\xe9\x1d\x1a\x2a\x38\x9c\x27\x05\xb9\x2e\xe6\xfb\x7f\xd6\x6f\x6c\x69\x44\xe5\x84\x56\x07\xff\x25\xb3\x8e\x56\xac\xde\xa1\x72\x34\xe4\x37\xcc\x6d\x1e\x47\xb8\x63\x42\x76\xf0\x7d\x0a\xe1\xd0\x75\x9a\xfc\xba\x26\x30\x6d\x00\xb3\x78\x76\x1a\xc7\x27\x27\x20\xf5\x8d\x50\xe0\xf4\x1d\x2a\x0b\xcc\x20\x68\x85\x27\x4e\xec\xb0\x5f\xf3\x16\x39\x38\xdd\x01\xc5\x16\x34\xf3\xee\x16\xde\x7f\xff\x0e\x84\x05\xa5\x5d\x83\x38\x94\xa8\xc1\xd2\x6e\x83\x97\x2b\x15\x05\x89\x69\x1f\x94\x91\x4b\x92\x91\xf4\x9c\xe4\x9d\xf4\xc3\x4b\xfd\xcb\x92\x46\x78\x5f\x09\x83\xf6\x79\x78\xf8\x0e\x92\xb4\x20\xd9\x6f\x8b\x25\x4c\xde\xff\x08\x1f\x56\xeb\x2c\x9f\x84\x34\x9b\x0b\xb1\x1b\x54\x0e\x46\xba\x44\xa2\x82\xf3\xe4\x22\x3b\xb8\x55\xc3\x5c\x8b\xec\x0f\x40\x55\x6a\x8e\xd3\x01\x5b\x9b\xda\xa1\x9d\xfe\xf0\xd3\x6c\x0e\x93\x5b\xbc\x9f\x74\xc4\xf1\x6f\xf8\xaf\x11\xbe\x53\xab\xb3\x44\x92\x5e\x90\xeb\x03\xd1\xda\x0f\x15\xfc\x1e\x56\xe9\x48\xce\xe6\xdb\xb9\xc7\xa2\xb5\x42\x1f\xf8\xa7\xf7\x4b\x70\x09\x2a\x27\xca\x60\xd1\x0e\x67\x0f\x6d\xd2\xaf\xfe\xbf\x2d\xf2\x42\x6d\xef\xb0\xee\xab\xf3\x65\xda\xb2\xd2\x89\x2f\xf8\xb4\xba\xce\xf8\xa7\xc5\xed\xa9\xa6\x77\x58\xf7\xb2\x3e\xd0\x7f\x87\x75\x27\xe8\x56\x4b\x1e\x08\x1c\x2a\xb9\x63\x42\x39\x26\x14\x94\x5a\x4a\x2c\x5d\x13\xa3\xb7\xb0\x45\xe4\x23\x45\xfb\xf0\x7f\x50\xd0\x75\x4e\xb2\x7c\x48\xea\x1b\xf4\x71\xc5\x76\x78\x28\xe6\x1e\x33\xe1\xb8\x65\x5e\xba\xc9\xb0\xa5\x76\xb9\xcf\x21\x04\xee\x5b\x6b\xc3\x4f\xc3\xa4\x50\x5c\x7c\x11\xdc\x33\xf9\x28\x69\x0d\xee\x3f\x38\xd0\xda\x59\x83\xea\xb3\x47\x7f\x14\x15\xce\xaf\xa4\x0f\x43\x61\x6c\x7b\x6f\xe4\xd1\x9a\x13\x4e\xe2\x78\x35\x8e\x2a\xbf\x91\xa2\x7c\xa5\xa9\x1b\xe2\x68\x9b\x04\xf5\x46\xd2\x76\x37\xea\x95\xf8\xdc\x9b\xbc\x23\xb7\x05\xcd\xc1\x1b\x39\x83\xdf\x3f\x90\x8c\x40\x0b\x7e\xd8\x7a\xb8\xe7\xf8\xe2\xa3\xdd\xc6\xbf\x07\x82\xd3\xbe\x04\x84\x05\x06\x7f\xea\x30\x5c\xd9\x46\x22\x6c\xd0\x7d\x45\x54\xbd\x2b\x14\xef\x8b\xe5\xd8\x0c\x74\x50\x46\xcf\xed\x73\x51\x1b\xf3\x18\xb4\xdf\x6d\x08\x0e\xa7\x3c\x06\x6d\x92\x7b\xc3\xee\x19\x47\x95\x11\xda\x08\x57\x87\xd1\x79\x0c\x7b\x17\x20\xc3\x7a\x78\xa8\xb5\xfd\x85\xe7\xd0\x5d\x67\x36\x74\x4a\x4b\x67\xa5\xad\x7b\x55\x3b\xfa\x5b\x86\xde\x84\x98\x52\x2b\x17\xde\x78\xb7\xcc\xde\x1e\xbf\xe7\x1e\x2f\xa8\x28\x4c\x5d\x6d\x9e\xea\x5d\x93\x79\x1c\x6d\x34\xaf\x9f\x53\xb1\xe1\xed\xe3\x0c\x83\x9f\xf3\x55\x7a\x36\x6c\x76\xc3\xbc\x1a\xc6\xff\x0a\x00\x00\xff\xff\x1e\xb8\xd2\x1b\xef\x0b\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 3055, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
