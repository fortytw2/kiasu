// Code generated by go-bindata.
// sources:
// schema/init.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaInitSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x4d\x73\xda\x3c\x10\xc7\xcf\xf6\xa7\xd8\x1b\x30\x0f\x79\xa6\xcd\x74\x7a\xc9\xc9\x01\x65\xea\x29\x31\xa9\xb1\x3b\xa4\x17\x8f\x6a\x2d\xa0\xc1\x48\xae\x5e\x12\xf8\xf6\x1d\xbf\x28\xc1\x24\x4c\x03\x87\x4c\x2e\x18\xe4\xbf\xb4\xbb\xff\xdf\x4a\x62\x14\x93\x20\x21\x40\xe6\x09\x89\x66\xe1\x34\x82\xf0\x06\xa2\x69\x02\x64\x1e\xce\x92\x19\x94\xcb\x5c\xed\x4a\x23\xaf\xfc\x7f\x08\x73\x6e\x70\x6b\xae\x7c\xa7\x4b\x82\xeb\x09\x01\xab\x51\x69\xe8\xfb\x1e\x67\x90\xa6\xe1\x18\xee\xe2\xf0\x36\x88\xef\xe1\x3b\xb9\x87\x31\xb9\x09\xd2\x49\x02\x4b\x14\x99\xa2\x82\xc9\x4d\x66\x2d\x67\xfd\xc1\xd0\xf7\xbd\x5c\x21\x35\xc8\x32\x6a\x20\x09\x6f\xc9\x2c\x09\x6e\xef\x92\x5f\x75\xc4\x28\x9d\x4c\x9e\x26\x0b\xf9\x58\x4d\xf0\x6c\xc9\x4e\xd1\xfb\x9e\x36\x8a\x97\x98\xe5\x56\x1b\xb9\x41\x95\x71\x06\x09\x99\x27\x43\xdf\xc3\x0d\xe5\x05\x8c\xc2\xea\xe7\xd3\x02\xfe\xe0\xb9\xb6\x34\x0a\x7f\xa4\x04\xc2\x68\x4c\xe6\x4d\x89\x59\x3d\x27\xb3\x82\xff\xc9\x38\xdb\xc2\x34\x72\xa5\xd7\x2f\xaa\xb9\x17\x17\x50\xc8\x25\x17\x60\xe4\x1a\x85\x06\xaa\x10\xa4\xc0\x0b\xc3\x37\xe8\xc6\xac\x46\x06\x46\xb6\x42\xbe\x00\x49\xad\x59\xc1\xe5\xff\x9f\x80\x6b\x10\xd2\xd4\x8a\xae\xc5\xb5\x36\x6b\x17\x38\xdd\x69\xaf\xca\x33\x73\x93\x62\x72\x43\x62\x12\x8d\xc8\xac\xcd\xdf\x95\x7f\x0e\x12\xdc\x96\x5c\xa1\x7e\x9b\x1e\xfe\x83\x30\x4a\x48\xfc\x33\x98\x40\xef\xf2\x0b\x7c\x9b\xa6\xf1\xac\x57\x85\xad\x13\xa4\x4b\x14\x06\x3a\x44\x86\xbe\xc7\x4b\x18\x85\xe3\xb8\x93\x65\xed\x44\xa3\x74\x01\x50\xe4\x92\x61\x7f\xaf\xfa\xdf\x3b\x83\xba\xff\xf9\xeb\x60\x08\xbd\x15\x6e\x7b\xad\x11\x0c\xae\xa7\xd3\x09\x09\xa2\x97\x49\x2e\x68\xa1\xf1\x68\x13\xec\x43\x68\x1e\xae\x0d\xba\x78\xea\x67\xdb\x0d\x1a\xb5\xe6\xb2\xd3\x0f\x8e\x7f\x45\x1d\x85\xe1\x39\x35\xe8\x74\xba\x8b\xdd\x8d\x7e\x2c\xe4\x27\xb2\x5a\xe3\xee\x1c\x52\x34\x37\xfc\x01\x8f\xb3\x32\xca\x1e\x47\xe5\x8c\xcb\xd6\xb8\x73\x90\x9e\xcd\x5c\xe3\xae\xc5\x53\xd2\xdd\x06\x85\x69\xc0\x3c\xae\xb0\xfa\x44\x50\x98\x4b\xc5\x80\x16\xc5\xb3\x60\x43\x19\xc2\x03\xa7\xd0\x1c\x29\x5d\x4e\x4f\xaa\x8f\xc5\xe9\x94\xd3\xd2\x6f\x1d\x59\x20\xb2\x6c\x21\x0b\x56\x45\xaf\x5c\x71\xdf\xe5\xa2\x7e\x77\xd0\xa1\x1d\xf9\x87\xbb\x02\xf6\x8b\x6a\xaa\xe1\x82\xf1\x07\xce\x2c\x2d\x8e\x55\x73\x16\xc4\x3d\x1b\x5e\x63\xd9\x71\xe9\xdd\x90\x56\x01\xca\xc2\x56\xb7\xcc\xe1\x3e\xb5\xaa\x78\x31\x66\xb8\x29\x10\xde\x76\x1f\xd6\x05\x35\x6b\x67\x56\x15\x6e\x8b\xd5\xfe\xf5\x9b\xf1\x21\x58\x55\x0c\x0e\xff\x2b\x94\x52\x9f\xb7\x4d\x56\x54\xaf\x0e\x53\x7e\x07\xff\x5e\x31\x65\xe8\x7b\xb9\x14\xe6\xc5\xf1\x57\x99\xf5\x37\x00\x00\xff\xff\xad\x34\xa3\xbe\x69\x09\x00\x00")

func schemaInitSQLBytes() ([]byte, error) {
	return bindataRead(
		_schemaInitSQL,
		"schema/init.sql",
	)
}

func schemaInitSQL() (*asset, error) {
	bytes, err := schemaInitSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/init.sql", size: 2409, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/init.sql": schemaInitSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"init.sql": {schemaInitSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
