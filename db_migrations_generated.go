// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\x4f\x73\xda\x3a\x14\xc5\xd7\xf6\xa7\xb8\x3b\x60\x1e\x79\x93\x97\x79\xf3\x36\x59\x11\x50\xe6\xb9\x25\x26\xf5\x9f\x0e\xe9\xc6\x23\xac\x0b\xa8\x18\xc9\xb5\xe4\x04\xbe\x7d\x47\xc6\x22\x36\x90\x36\x74\xda\x4c\xbb\x62\x46\x9c\xab\x3f\xbf\x73\x74\xe5\x61\x40\x06\x11\x01\x32\x8d\x88\x1f\x7a\x13\x1f\xbc\x5b\xf0\x27\x11\x90\xa9\x17\x46\x21\xe4\x8b\xb4\xd8\xe6\x5a\x5e\xbb\xdf\x11\xa6\x5c\xe3\x46\x5f\xbb\x56\x17\x0d\x6e\xc6\x04\x4a\x85\x85\x82\xae\xeb\x70\x06\x71\xec\x8d\xe0\x3e\xf0\xee\x06\xc1\x03\xbc\x27\x0f\x30\x22\xb7\x83\x78\x1c\xc1\x02\x45\x52\x50\xc1\xe4\x3a\x29\x4b\xce\xba\xbd\xbe\xeb\x3a\x69\x81\x54\x23\x4b\xa8\x86\xc8\xbb\x23\x61\x34\xb8\xbb\x8f\x3e\x55\x2b\xfa\xf1\x78\xbc\x2f\x16\xf2\xc9\x14\x38\x65\xce\xce\xd1\xbb\x0e\xae\x29\xcf\x60\xe8\x45\x64\x1a\xed\x65\xe6\x8f\xd8\xf7\x3e\xc4\x04\xba\x95\xa0\xe7\xf6\xae\x5d\xf7\xe2\x02\x32\xb9\xe0\x02\xb4\x5c\xa1\x50\x40\x0b\x04\x29\xf0\x42\xf3\x35\xda\xb1\x52\x21\x03\x2d\x6b\x21\x9f\x83\xa4\xa5\x5e\xc2\xd5\xdf\x97\xc0\x15\x08\xa9\x2b\x45\x1b\x4f\xa5\x4d\xea\x09\xce\xa7\xe4\x18\xbc\x89\x2d\x0a\xc8\x2d\x09\x88\x3f\x24\x61\x8d\xbd\x79\xa8\x5f\x8c\xd3\xc1\x4d\xce\x0b\x54\xaf\xd3\xc3\x5f\xe0\xf9\x11\x09\x3e\x0e\xc6\xd0\xb9\xfa\x17\xfe\x9f\xc4\x41\xd8\x31\xdb\xac\x0e\x44\x17\x28\x34\x1c\xf8\xe2\xf0\x1c\x86\xde\x28\x68\x9d\xaa\x22\xb7\x53\xda\x05\x50\xa4\x92\x61\xb7\x41\x6b\xb6\xd5\xa8\xba\xff\xfc\xd7\xeb\x43\x67\x89\x9b\x4e\x0d\x8e\xc1\xcd\x64\x32\x26\x03\xff\x78\x93\x73\x9a\x29\xac\x8c\xaf\xdd\xaa\x23\xe1\xf9\x23\x32\x6d\x99\xb6\xfb\x49\x38\xdb\xc0\xc4\x3f\xb0\xb3\xfa\xad\xd3\xa3\x50\x29\x2e\x5b\xf9\xb1\x79\x31\x29\x41\xa1\x79\x4a\x35\x5a\x9d\x6a\xc7\xc4\x8e\xfe\xd9\x11\x39\xd3\xdb\x15\x6e\xed\xed\x3c\xcf\x5b\x9a\x6a\xfe\x88\x2f\xbb\xab\x8b\xf2\x65\x73\x2d\xea\x64\x85\x5b\x6b\xeb\x33\xfe\x15\x6e\x6b\x43\xe7\x32\x63\x06\x60\xd3\xc9\x35\xe5\x42\x53\x2e\x20\x95\x59\x86\xa9\xae\x6a\xe4\x1c\xe6\x88\xec\xc0\x51\x5b\xfe\x13\x0d\x8d\x43\x12\x84\x4d\xa8\x6f\xd0\x43\x05\x5d\x63\xdb\xcc\xbd\xa6\xc3\x70\x4e\xcb\x4c\x77\x9a\x2d\xb5\xde\x7b\x1f\x4c\xe1\xbe\xb5\x56\x7c\x2a\x92\x5c\x30\xfe\xc8\x59\x49\xb3\x93\xd0\x2a\xdd\x6f\xf8\x98\x38\x19\x55\x3a\x41\xf1\xa5\xc4\xf2\xa8\xca\xac\x9f\x67\xa5\x79\x14\x0e\x63\x5f\x16\xd9\xd1\x98\xe6\x3a\xc3\xc3\xd1\x67\x82\xbb\x99\xfa\x50\x16\x59\x8b\x5f\x62\x13\xc5\x15\x50\xf8\x2c\xcd\x5b\x45\x67\x19\xc2\x0c\xf5\x13\xa2\xb0\x90\x05\xb3\xd9\x3b\x66\x9b\x34\x52\xf9\xda\xb6\xe1\xec\x6a\x4e\x49\xed\x6c\x4d\xb1\x59\xe5\x94\xb4\xda\xdc\x1b\x36\x23\xd7\xc9\x0b\x2e\x0b\xae\xb7\xe6\x25\x3a\x96\x5d\x1a\x49\x33\x5e\xcf\xd1\xdd\x1f\xb8\x0f\xf5\x71\x7a\xcd\x6e\xb2\xc3\x99\x4b\xa5\x7f\xe8\x76\x7f\x93\xd0\x9b\x80\x49\xa5\xd0\x28\x74\xb2\xa4\x6a\x79\xfc\x79\x74\x3a\x9f\x8e\x79\xc4\x64\xf1\x52\x2b\xe8\xf4\x5d\x67\x26\xd9\xf6\x35\x17\xc0\x7c\x4a\xe8\x82\xc2\xbb\x70\xe2\xdf\x34\x93\xdf\xdc\x57\x45\xfc\x6b\x00\x00\x00\xff\xff\x03\x47\xa2\xee\xba\x0a\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 2746, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
