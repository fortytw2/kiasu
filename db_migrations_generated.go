// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x6e\xb6\x51\xbb\xd8\x2e\x8a\x5e\x72\x72\x12\x06\xab\xd6\x91\xb7\x92\xdc\x66\x7b\x21\x68\x71\x1c\xb3\xa1\x48\x95\x1f\xbb\xd1\xbf\x2f\x28\x4b\x8e\x6c\x27\xdd\x24\x68\x83\xee\x49\x10\xf9\x86\x1c\xbe\xf7\x66\xc8\x8b\x8c\xcc\x0b\x02\xe4\xa6\x20\x69\x9e\x2c\x53\x48\xae\x20\x5d\x16\x40\x6e\x92\xbc\xc8\xa1\xbe\x2d\x4d\x53\x3b\x7d\x16\x7f\x05\x58\x0a\x87\xf7\xee\x2c\xee\x71\xc5\xfc\x7c\x41\xc0\x5b\x34\x16\xc6\x71\x24\x38\xac\x56\xc9\x25\x7c\xcc\x92\xeb\x79\xf6\x09\x7e\x21\x9f\xe0\x92\x5c\xcd\x57\x8b\x02\x6e\x51\x51\xc3\x14\xd7\x15\xf5\x5e\xf0\xf1\x64\x1a\xc7\x51\x69\x90\x39\xe4\x94\x39\x28\x92\x6b\x92\x17\xf3\xeb\x8f\xc5\x1f\xed\x8e\xe9\x6a\xb1\xd8\x07\x2b\xfd\x25\x04\x44\xbe\xe6\x2f\xc1\xc7\x11\xe3\x95\x50\x70\xbe\x5c\x2e\xc8\x3c\x3d\xc5\x6d\x98\xb4\x18\x70\xd6\x19\x51\x23\x2d\xbd\x75\xba\x42\x43\x05\x87\x8b\xa4\x20\x37\xc5\x74\x3f\x67\xfd\xda\x96\x46\xd4\x4e\x68\x75\x30\x2f\x99\x75\xb4\x66\x4d\x85\xca\xd1\x90\xdf\x30\xb7\x69\x1c\x61\xc5\x84\xec\xe0\xfb\x14\xc2\xa6\xab\x34\xf9\x75\x45\x60\xdc\x02\x26\xf1\xe4\x2c\x8e\x67\x33\x90\xfa\x56\x28\x70\xfa\x0e\x95\x05\x66\x10\xb4\xc2\x99\x13\x15\xf6\x63\xde\x22\x07\xa7\x3b\xa0\xd8\x80\x66\xde\x6d\xe1\xfd\xf7\xef\x40\x58\x50\xda\xb5\x88\x43\x89\x5a\x2c\xed\x16\x78\xb9\x52\x51\x90\x98\xf6\x41\x19\xb9\x22\x19\x49\x2f\x48\xde\x49\x3f\x3c\xd4\x7f\x2c\x69\x84\xf7\xb5\x30\x68\x9f\x87\x87\xef\x20\x49\x0b\x92\xfd\x36\x5f\xc0\xe8\xfd\x8f\xf0\x61\xb9\xca\xf2\x51\x48\xb3\x3d\x10\xbb\x45\xe5\xe0\x48\x97\x48\xd4\x70\x91\x5c\x66\x07\xa7\x6a\x99\xdb\x21\xfb\x0d\x50\x95\x9a\xe3\x78\xc0\xd6\xba\x71\x68\xc7\x3f\xfc\x34\x99\xc2\x68\x8b\xf7\xa3\x8e\x38\xfe\x15\xff\xb5\xc2\x77\x6a\x75\x96\x48\xd2\x4b\x72\x73\x20\xda\xee\x43\x05\xbf\x87\x65\x7a\x24\x67\xfb\xed\xdc\x63\xd1\x5a\xa1\x0f\xfc\xd3\xfb\x25\xb8\x04\x95\x13\x65\xb0\x68\x87\xb3\x87\x36\xe9\x47\xbf\x6d\x8b\xbc\x50\xdb\x3b\x6c\xfa\xea\x7c\x99\xb6\xac\x74\xe2\x33\x3e\xad\xae\x33\xfe\x69\x71\x7b\xaa\xe9\x1d\x36\xbd\xac\x0f\xf4\xdf\x61\xd3\x09\xba\xd1\x92\x07\x02\x87\x4a\x56\x4c\x28\xc7\x84\x82\x52\x4b\x89\xa5\x6b\x63\xf4\x06\x36\x88\xfc\x48\xd1\x3e\xfc\x5f\x14\x74\x95\x93\x2c\x1f\x92\xfa\x06\x7d\x5c\xb1\x0a\x0f\xc5\xdc\x63\x46\x1c\x37\xcc\x4b\x37\x1a\xb6\xd4\x2e\xf7\x29\x84\xc0\x7d\x6b\x6d\xf9\x69\x99\x14\x8a\x8b\xcf\x82\x7b\x26\x1f\x25\xad\xc5\xfd\x2f\x2f\xb4\x5a\xfa\xd0\xf5\x8f\x7d\xed\x8d\x3c\x19\x73\xc2\x49\x3c\x1e\x8d\xa3\xda\xaf\xa5\x28\x5f\xe9\xda\x96\x19\xba\x4b\x82\x7a\x23\xe9\x6e\x35\xea\x95\xf8\xab\x77\x71\xc7\xde\x0e\x34\x05\x6f\xe4\x04\x7e\xff\x40\x32\x02\x3b\xf0\x83\x16\xb4\x77\xa7\xb0\xc0\xe0\x4f\x1d\xee\x3d\xb6\x96\x08\x6b\x74\x5f\x10\x55\x2f\x98\xe2\xbd\x8f\x4f\x75\xa2\x03\x87\x3f\xb7\x05\x45\xbb\x98\xc7\xa0\xfd\x6a\x43\x70\xd8\xe5\x31\x68\x9b\xdc\x1b\x36\xb6\x38\xaa\x8d\xd0\x46\xb8\x26\xdc\x6a\xa7\xb0\x77\x01\x32\x9b\x01\x17\xb6\x96\xac\x01\xb7\x15\xb6\xcd\x12\xba\x56\xc1\xea\xd0\x40\xb4\x81\x8d\x97\x12\x2a\xcd\x31\x8e\x3a\x30\x0d\x7f\x4f\x55\x58\x80\xb7\xe5\x35\xac\x83\x87\x1a\xdb\xb3\x39\x85\x8e\xab\xc9\xd0\x40\x3b\xad\x6a\x6d\xdd\xab\xda\xd0\x3f\xd2\xff\x26\xac\x97\x5a\xb9\xf0\xb6\xdb\x32\xbb\x3d\x7d\xc7\x3d\x5e\x67\x51\xb8\x6d\xb5\x79\x8a\xd1\xd1\x34\x8e\xd6\x9a\x37\xcf\x29\xe4\xf0\xe6\x71\x86\xc1\xcf\xf9\x32\x3d\x1f\x36\xb9\x61\x5e\x2d\xe3\x7f\x07\x00\x00\xff\xff\x9f\xda\x54\xf4\xe7\x0b\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 3047, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
