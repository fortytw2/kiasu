// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\xcf\x6e\xe3\x36\x10\xc6\xcf\xd2\x53\xcc\xcd\x0e\xea\x14\xdb\x45\xd1\x4b\x4e\x8a\xc3\xa0\x6a\x1d\x69\xab\x3f\x45\xb6\x17\x81\x11\xc7\x31\x1b\x8a\x54\x49\x2a\xb1\xde\xbe\x10\x2d\x26\x96\x9d\xa0\xeb\xa2\x0d\x72\x89\x10\xe2\x1b\x72\xf8\xfd\x86\x33\x5e\x66\x24\x2a\x08\x90\xdb\x82\x24\x79\x9c\x26\x10\x5f\x43\x92\x16\x40\x6e\xe3\xbc\xc8\xa1\xbd\xaf\x75\xdf\x5a\x75\x11\xfe\x83\xb0\xe6\x16\xb7\xf6\x22\xf4\xba\x22\xba\x5c\x11\xe8\x0c\x6a\x03\xf3\x30\xe0\x0c\xca\x32\xbe\x82\x2f\x59\x7c\x13\x65\x5f\xe1\x57\xf2\x15\xae\xc8\x75\x54\xae\x0a\xb8\x47\x59\x69\x2a\x99\x6a\xaa\xae\xe3\x6c\x7e\xb6\x08\xc3\xa0\xd6\x48\x2d\xb2\x8a\x5a\x28\xe2\x1b\x92\x17\xd1\xcd\x97\xe2\x0f\x77\x62\x52\xae\x56\xcf\xc1\x52\x3d\x0d\x01\x41\xd7\xb2\x53\xf4\x61\x60\xac\xe6\x2d\x56\x75\x67\xac\x6a\x50\x57\x9c\x41\x41\x6e\x8b\x45\x18\x60\x43\xb9\x80\x65\x3c\xfc\xfb\xbc\xc1\x10\xb2\x4c\x93\xbc\xc8\xa2\x38\x29\xc0\x69\xaa\x4e\xf2\xbf\xa0\x4c\xe2\xdf\x4a\x02\x73\xb7\x74\x16\x9e\x5d\x84\xe1\xf9\x39\x08\x75\xcf\x25\x58\xf5\x80\xd2\x00\xd5\x08\x4a\xe2\xb9\xe5\x0d\xfa\xb5\xce\x20\x03\xab\x46\x21\x5f\x83\xa2\x9d\xdd\xc0\xe7\xef\x3f\x01\x37\x20\x95\x75\x8a\xa9\x9d\x4e\x5b\x8d\x1b\x9c\xee\x6a\x30\xe0\xa8\x7c\x50\x46\xae\x49\x46\x92\x25\xc9\x47\x4c\xfb\x57\x3d\xd5\x7e\xdc\xb6\x5c\xa3\xf9\x36\x3d\x7c\x07\x71\x52\x90\xec\xf7\x68\x05\xb3\xcf\x3f\xc2\xcf\x69\x99\xe5\xb3\xe1\x58\x97\x20\xbd\x47\x69\xe1\xc0\xfd\x80\xb7\xb0\x8c\xaf\xb2\x49\x96\xce\x89\x9d\xd2\x1f\x80\xb2\x56\x0c\xe7\x7b\xb7\xbf\xeb\x2d\x9a\xf9\x0f\x3f\x9d\x2d\x60\xb6\xc1\xed\x6c\x34\x82\xc1\x65\x9a\xae\x48\x94\x1c\x27\xb9\xa6\xc2\xa0\x03\x39\xba\x3f\x22\x8e\x93\x2b\x72\x3b\x81\xb0\xfb\x54\x9c\x6d\x21\x4d\x0e\xf0\xb8\xef\x58\x0d\x06\x8d\xe1\x6a\x52\x0f\x9e\xff\x40\x1d\xa5\xe5\x35\xb5\xe8\x75\x66\x8a\xdd\xaf\x7e\x2c\xe4\x27\xb2\x7a\xc0\xde\xbf\xa9\xd3\x58\xd1\xda\xf2\x47\x7c\x9b\x96\xd5\xdd\xdb\xb0\xbc\x75\xd5\x03\xf6\x1e\xd3\x8b\x9d\x0f\xd8\x8f\x80\x5a\xda\x37\x28\xed\x0e\xcd\xd3\x06\x87\xbf\x08\x1a\x6b\xa5\x19\x50\x21\x5e\x04\x0d\x65\x08\x8f\x9c\xc2\xae\x81\x4c\x49\x3d\xab\x3e\x16\xa9\x53\x7a\xa3\x6f\x60\x6b\x25\xd8\x70\xf0\x7e\xad\x36\x94\x4b\x4b\xb9\x84\x5a\x09\x81\xb5\x75\x2e\xaa\x35\xac\x11\xd9\x41\xcd\xfa\xf0\xff\xd0\x88\x32\x27\x59\xbe\x5f\x66\xef\x30\x25\x24\x6d\x70\x5a\xde\xcf\x9a\x19\xc3\x35\xed\x84\x75\x8d\xcb\x0f\x81\x31\xf7\x05\x0c\x81\x2f\x5e\x0e\xfe\x38\x27\xb9\x64\xfc\x91\xb3\x8e\x8a\x57\x4d\x73\xba\x0f\x39\x2e\x5b\xd1\x0d\x73\xea\xf0\xa5\x77\x5a\x1c\xad\x59\x6e\x05\x1e\xae\xbe\x58\xb4\xdb\x69\x01\x9d\x16\x13\x83\x2a\x5f\x32\xdc\x00\x85\x3f\xd5\x30\x3e\xe9\x9d\x40\xb8\x43\xfb\x84\x28\xbd\x8b\x92\xf9\xe2\x3a\x36\xaf\xda\x2b\xbb\x6f\x7d\x4f\xc1\x2e\xe6\x35\xa9\xdf\x6d\x5f\x3c\x9c\xf2\x9a\xd4\x25\xf7\x6e\xaf\xd4\x21\xd1\x5c\x69\x6e\xfb\x61\x98\x1e\xcb\x3e\xbd\xd9\x13\xdd\x15\x76\x14\xaa\x4e\x0b\xdf\x16\xdd\x0d\x26\x74\x0e\x7f\xcd\xb5\xca\xfc\xbb\xd6\x56\x2b\x69\x51\xda\x6a\x43\xcd\xe6\xb8\x30\xfe\x77\xa3\x5e\x2d\xc8\xe0\x4e\xb1\xfe\x38\x19\xdc\x5a\x4d\xe1\x97\x3c\x4d\x2e\x07\x03\xff\x0e\x00\x00\xff\xff\x2e\x16\x16\x6c\x1f\x0b\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 2847, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
