// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\x4f\x6f\xe3\x36\x10\xc5\xcf\xd2\xa7\x98\x9b\x6d\xd4\x29\xb6\x8b\xa2\x97\x9c\x9c\x84\xc1\xaa\x75\xe4\xad\x2c\xb7\xd9\x5e\x08\x5a\x1c\xdb\xac\x69\x52\xe5\x9f\xdd\xe8\xdb\x17\x94\x25\x45\xfe\x93\x6e\x12\xb4\x41\xf7\x64\x58\x7a\x14\x47\xef\xf7\x66\xa8\xeb\x8c\x4c\x72\x02\xe4\x3e\x27\xe9\x3c\x99\xa5\x90\xdc\x42\x3a\xcb\x81\xdc\x27\xf3\x7c\x0e\xe5\xba\x30\x55\xe9\xf4\x65\xfc\x15\x61\x21\x1c\x3e\xb8\xcb\xb8\xd5\xe5\x93\xab\x29\x01\x6f\xd1\x58\x18\xc6\x91\xe0\xb0\x58\x24\x37\xf0\x31\x4b\xee\x26\xd9\x27\xf8\x85\x7c\x82\x1b\x72\x3b\x59\x4c\x73\x58\xa3\xa2\x86\x29\xae\x77\xd4\x7b\xc1\x87\xa3\x71\x1c\x47\x85\x41\xe6\x90\x53\xe6\x20\x4f\xee\xc8\x3c\x9f\xdc\x7d\xcc\xff\xa8\x77\x4c\x17\xd3\x69\xb7\x58\xe9\x2f\x61\x41\xe4\x4b\xfe\x12\x7d\x1c\x31\xbe\x13\x0a\xae\x66\xb3\x29\x99\xa4\xa7\xba\x15\x93\x16\x83\xce\x3a\x23\x4a\xa4\x85\xb7\x4e\xef\xd0\x50\xc1\xe1\x3a\xc9\xc9\x7d\x3e\xee\xee\x59\xbf\xb4\x85\x11\xa5\x13\x5a\x1d\xdc\x97\xcc\x3a\x5a\xb2\x6a\x87\xca\xd1\x50\x5f\xbf\xb6\x71\x1c\xe1\x8e\x09\xd9\xc8\xbb\x12\xc2\xa6\x8b\x34\xf9\x75\x41\x60\x58\x0b\x46\xf1\xe8\x32\x8e\x2f\x2e\x40\xea\xb5\x50\xe0\xf4\x16\x95\x05\x66\x10\xb4\xc2\x0b\x27\x76\xd8\x5e\xf3\x16\x39\x38\xdd\x08\xc5\x0a\x34\xf3\x6e\x03\xef\xbf\x7f\x07\xc2\x82\xd2\xae\x56\x1c\x22\xaa\xb5\xb4\x79\xc0\xcb\x49\x45\x01\x31\x6d\x17\x65\xe4\x96\x64\x24\xbd\x26\xf3\x06\x7d\xff\xa5\xfe\x63\xa4\x11\x3e\x94\xc2\xa0\x7d\x9e\x1e\xbe\x83\x24\xcd\x49\xf6\xdb\x64\x0a\x83\xf7\x3f\xc2\x87\xd9\x22\x9b\x0f\x42\x99\xf5\x0b\xb1\x35\x2a\x07\x47\x5c\x22\x51\xc2\x75\x72\x93\x1d\xbc\x55\xed\xdc\x5e\xd9\x6e\x80\xaa\xd0\x1c\x87\x3d\xb7\x96\x95\x43\x3b\xfc\xe1\xa7\xd1\x18\x06\x1b\x7c\x18\x34\xc6\xf1\xaf\xe4\xaf\x06\xdf\xd0\x6a\x22\x91\xa4\x37\xe4\xfe\x00\xda\xfe\x87\x0a\xfe\x00\xb3\xf4\x08\x67\xfd\xdb\xa4\xc7\xa2\xb5\x42\x1f\xe4\xa7\xcd\x4b\x48\x09\x2a\x27\x8a\x10\xd1\x46\x67\x0f\x63\xd2\x5e\xfd\xb6\x23\xf2\x42\xb6\x5b\xac\xda\xee\x7c\x19\x5b\x56\x38\xf1\x19\x9f\xa6\xeb\x8c\x7f\x1a\x6e\x6b\x35\xdd\x62\xd5\x62\x7d\xb4\x7f\x8b\x55\x03\x74\xa5\x25\x0f\x06\xf6\x49\xee\x98\x50\x8e\x09\x05\x85\x96\x12\x0b\x57\xaf\xd1\x2b\x58\x21\xf2\x23\xa2\xed\xf2\x7f\x11\xe8\x62\x4e\xb2\x79\xdf\xd4\x37\x98\xe3\x8a\xed\xf0\x10\x66\xa7\x19\x70\x5c\x31\x2f\xdd\xa0\x3f\x52\x9b\xda\xc7\x10\x16\x76\xa3\xb5\xf6\xa7\x76\x52\x28\x2e\x3e\x0b\xee\x99\x3c\x6b\x5a\xad\xfb\x5f\x1e\x68\xa5\xf4\x61\xea\x1f\xe7\xda\x1b\x79\x72\xcd\x09\x27\xf1\xf8\x6a\x1c\x95\x7e\x29\x45\xf1\xca\xd4\xd6\xce\xd0\x7d\x11\xd4\x1b\x49\xf7\x4f\xa3\x5e\x89\xbf\xda\x14\x37\xee\xed\x45\x63\xf0\x46\x8e\xe0\xf7\x0f\x24\x23\xb0\x17\x3f\xb2\xa0\x6d\x3a\x85\x05\x06\x7f\xea\x70\xee\xb1\xa5\x44\x58\xa2\xfb\x82\xa8\x5a\x60\x8a\xb7\x39\x3e\xe5\x44\x7b\x09\x7f\xee\x08\x8a\xf6\x6b\xce\x49\xdb\xa7\xf5\xc5\x61\x97\x73\xd2\xba\xb8\x37\x1c\x6c\x71\x54\x1a\xa1\x8d\x70\x55\x38\xd5\x4e\x65\xef\x82\xe4\xe2\x02\xb8\xb0\xa5\x64\x15\xb8\x8d\xb0\x75\x95\xd0\x8c\x0a\x56\x86\x01\xa2\x0d\xac\xbc\x94\xb0\xd3\x1c\xe3\xa8\x11\xd3\xf0\xef\xa9\x0e\x0b\xf2\xba\xbd\xfa\x7d\xf0\xd8\x63\x9d\x9b\x63\x68\xbc\x1a\xf5\x03\xb4\x67\x55\x6a\xeb\x5e\x35\x86\xfe\xd1\xfe\x37\x71\xbd\xd0\xca\x85\x6f\xbb\x0d\xb3\x9b\xd3\xef\xb8\xf3\x7d\x16\x85\xd3\x56\x9b\xa7\x1c\x1d\x8c\xe3\x68\xa9\x79\xf5\x9c\x46\x0e\xdf\x3c\xce\x30\xf8\x79\x3e\x4b\xaf\xfa\x43\xae\x5f\x57\x37\xe3\x0c\x32\x0e\xd6\x31\xe7\x2d\x5a\x70\x86\x15\x5b\xa1\xd6\x87\x2c\x82\x86\x76\x9a\x61\x1c\x05\x38\x9d\xc7\x5d\xb5\x3d\xb3\x6b\x7a\xc7\x67\xc2\x39\x61\xdd\x6a\xaf\xa0\x72\x94\xad\xa6\xa0\x31\x34\x1b\x86\xd7\xfb\x3b\x00\x00\xff\xff\xea\xae\x8a\x61\xc5\x0c\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 3269, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
