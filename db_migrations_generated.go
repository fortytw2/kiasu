// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x6e\xb6\x51\xa5\xd8\x2e\x8a\x5e\x72\x72\x12\x06\x55\xeb\xc8\x5b\x7d\x14\xd9\x5e\x04\x5a\x1c\xc7\xac\x25\x52\xe5\xc7\xae\xf5\xef\x0b\xca\x92\x23\xd9\x4e\x13\x17\x6d\xd0\x9e\x04\x50\x6f\xc8\x99\xf7\x1e\x67\x78\x1b\x93\x79\x4a\x80\x3c\xa6\x24\x4a\xc2\x65\x04\xe1\x3d\x44\xcb\x14\xc8\x63\x98\xa4\x09\xd4\x4f\x85\x6a\x6a\x23\xaf\xfd\x57\x80\x05\x37\xb8\x33\xd7\x7e\x8f\x4b\xe7\x37\x0b\x02\x56\xa3\xd2\x30\xf5\x3d\xce\x20\xcb\xc2\x3b\xf8\x14\x87\x0f\xf3\xf8\x33\xfc\x4c\x3e\xc3\x1d\xb9\x9f\x67\x8b\x14\x9e\x50\xe4\x8a\x0a\x26\xab\xdc\x5a\xce\xa6\xb3\xc0\xf7\xbd\x42\x21\x35\xc8\x72\x6a\x20\x0d\x1f\x48\x92\xce\x1f\x3e\xa5\xbf\xb5\x27\x46\xd9\x62\x71\x08\x16\xf2\xab\x0b\xf0\x6c\xcd\x2e\xc1\xfb\x1e\x65\x15\x17\x70\xb3\x5c\x2e\xc8\x3c\x3a\xc5\xad\x69\xa9\xd1\xe1\xb4\x51\xbc\xc6\xbc\xb0\xda\xc8\x0a\x55\xce\x19\xdc\x86\x29\x79\x4c\x83\xc3\x3f\x6d\x57\xba\x50\xbc\x36\x5c\x8a\xd1\xff\x92\x6a\x93\xd7\xb4\xa9\x50\x98\xdc\xe5\x37\xcc\x2d\xf0\x3d\xac\x28\x2f\x3b\xf8\x21\x05\x77\x68\x16\x85\xbf\x64\x04\xa6\x2d\x60\xe6\xcf\xae\x7d\xff\xea\x0a\x4a\xf9\xc4\x05\x18\xb9\x45\xa1\x81\x2a\x04\x29\xf0\xca\xf0\x0a\xfb\x35\xab\x91\x81\x91\x1d\x90\xaf\x41\x52\x6b\x36\xf0\xf1\xdb\x0f\xc0\x35\x08\x69\x5a\xc4\x58\xa2\x16\x9b\x77\x1b\x5c\xae\x94\xe7\x24\xce\xfb\xa0\x98\xdc\x93\x98\x44\xb7\x24\xe9\xa4\x1f\x16\xf5\x2f\x4b\xea\xe1\xae\xe6\x0a\xf5\xdb\xf0\xf0\x0d\x84\x51\x4a\xe2\x5f\xe7\x0b\x98\x7c\xfc\x1e\x7e\x5c\x66\x71\x32\x71\x69\xb6\x05\xd1\x27\x14\x06\x8e\x74\xf1\x78\x0d\xb7\xe1\x5d\x3c\xaa\xaa\x65\x6e\x8f\xec\x0f\x40\x51\x48\x86\xd3\x01\x5b\xab\xc6\xa0\x9e\x7e\xf7\xc3\x2c\x80\xc9\x06\x77\x93\x8e\x38\xf6\x8a\xff\x5a\xe1\x3b\xb5\x3a\x4b\x84\xd1\x1d\x79\x1c\x89\xb6\xff\xe4\x9c\xed\x60\x19\x1d\xc9\xd9\x7e\x3b\xf7\x68\xd4\x9a\xcb\x91\x7f\x7a\xbf\x38\x97\xa0\x30\xbc\x70\x16\xed\x70\x7a\x6c\x93\x7e\xf5\xff\x6d\x91\x0b\xb5\xdd\x62\xd3\xdf\xce\xcb\xb4\xa5\x85\xe1\x5f\xf0\x65\x75\x8d\xb2\x2f\x8b\xdb\x53\x9d\x6f\xb1\xe9\x65\x7d\xa6\x7f\x8b\x4d\x27\xe8\x5a\x96\xcc\x11\x38\x54\xb2\xa2\x5c\x18\xca\x05\x14\xb2\x2c\xb1\x30\x6d\x8c\x5c\xc3\x1a\x91\x1d\x29\xda\x87\xff\x83\x82\x66\x09\x89\x93\x21\xa9\xef\xd0\xc7\x05\xad\x70\x2c\xe6\x01\x33\x61\xb8\xa6\xb6\x34\x93\x61\x4b\xed\x72\x0f\xc0\x05\x1e\x5a\x6b\xcb\x4f\xcb\x24\x17\x8c\x7f\xe1\xcc\xd2\xf2\x2c\x69\x2d\xee\x3f\x38\xd0\xf6\xb3\x06\xc5\x1f\x16\xed\x49\x94\x3b\xbf\x2e\xad\x1b\x0a\xc7\xb6\xb7\xaa\x3c\x59\x33\xdc\x94\x78\xbc\xfa\xcc\xe0\x7e\xa7\x00\xac\x2a\x47\xfc\xe5\xbd\xa3\xb8\x06\x0a\xbf\x4b\x37\xab\xe8\xaa\x44\x58\xa1\xf9\x8a\x28\x7a\x92\x05\xeb\xbd\x77\xca\x6d\x3e\x70\xe5\x5b\xdb\x86\xb7\x8f\x39\x07\xed\x77\x1b\x82\xdd\x29\xe7\xa0\x6d\x72\xef\xd8\x8c\x7c\xaf\x56\x5c\x2a\x6e\x1a\x37\x89\x4e\x61\x1f\x1c\x64\x68\xaf\x67\xeb\x1e\x0a\x0e\xa0\x2b\x67\x36\xec\x26\x7b\x3a\x6b\xa9\xcd\xdf\xba\xdd\x7f\xc9\xd0\xbb\x10\x53\x48\x61\xdc\x93\x69\x43\xf5\xe6\xf4\x79\x74\xde\x9f\x9e\x1b\x62\x52\xbd\xd4\x0a\x26\x81\xef\xad\x24\x6b\xde\x72\x01\xdc\x53\xc2\x28\x0a\x3f\x25\xcb\xe8\x66\xe8\xfc\x61\x5e\x2d\xe3\x7f\x06\x00\x00\xff\xff\xfa\xef\x87\x7c\x3e\x0b\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 2878, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
